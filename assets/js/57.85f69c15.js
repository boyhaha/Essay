(window.webpackJsonp=window.webpackJsonp||[]).push([[57],{429:function(_,v,l){"use strict";l.r(v);var i=l(44),t=Object(i.a)({},(function(){var _=this,v=_.$createElement,l=_._self._c||v;return l("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[l("h1",{attrs:{id:"_04-赋值、浅拷贝、深拷贝"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#_04-赋值、浅拷贝、深拷贝"}},[_._v("#")]),_._v(" 04-赋值、浅拷贝、深拷贝")]),_._v(" "),l("ul",[l("li",[l("p",[_._v("直接赋值：其实就是对象的引用（别名）。")]),_._v(" "),l("ul",[l("li",[_._v("不会开辟新的内存，只是赋值了对象的引用，")]),_._v(" "),l("li",[_._v("指向同一片内存，若该内存中的值发生了改变，则指向该内存的对象都会改变")])])]),_._v(" "),l("li",[l("p",[_._v("浅拷贝(copy)：拷贝父对象，不会拷贝对象的内部的子对象。")]),_._v(" "),l("ul",[l("li",[_._v("浅拷贝会创建新对象，其内容是对原对象的引用；")]),_._v(" "),l("li",[_._v("也就说是只拷贝院对象的顶层，或者说是表象，")]),_._v(" "),l("li",[_._v("若原对象中还有一个其他对象的引用，比如说列表，修改了这个列表的值之后，也会对拷贝出来的对象产生影响")]),_._v(" "),l("li",[_._v("主要有三种表现形式：\n"),l("ul",[l("li",[_._v("切片操作 ： b = a[:] 或者 b = [x for x in a]")]),_._v(" "),l("li",[_._v("工厂函数： b = list(a)")]),_._v(" "),l("li",[_._v("copy模块中的copy函数： b = copy.copy(a)")])])])])]),_._v(" "),l("li",[l("p",[_._v("深拷贝(deepcopy)：")]),_._v(" "),l("ul",[l("li",[_._v("copy 模块的 deepcopy 方法，完全拷贝了父对象及其子对象。")]),_._v(" "),l("li",[_._v("是对原对象所有层次的拷贝，相当于拷贝出来原对象的所有数据另存一份。")]),_._v(" "),l("li",[_._v("此时对原对象的所有修改都不会改变拷贝出来的对象")])])]),_._v(" "),l("li",[l("p",[_._v("注意点：")]),_._v(" "),l("ul",[l("li",[_._v("对于非容器类型，也就是原子类型对象，如数字、字符，没有拷贝一说，产生的都是原对象的引用。")]),_._v(" "),l("li",[l("span",{staticStyle:{"background-color":"#ffaaaa"}},[_._v("如果元组变量值包含原子类型对象，即使采用了深拷贝，也只能得到浅拷贝。")])])])]),_._v(" "),l("li",[l("p",[_._v("Python中大多数时候都是浅拷贝")]),_._v(" "),l("ul",[l("li",[_._v("时间角度，浅拷贝花费时间更少")]),_._v(" "),l("li",[_._v("空间角度，浅拷贝花费内存更少")]),_._v(" "),l("li",[_._v("效率角度，浅拷贝只拷贝顶层数据，一般情况下比深拷贝效率高。")])])])])])}),[],!1,null,null,null);v.default=t.exports}}]);