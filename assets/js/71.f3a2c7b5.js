(window.webpackJsonp=window.webpackJsonp||[]).push([[71],{440:function(n,e,i){"use strict";i.r(e);var o=i(44),l=Object(o.a)({},(function(){var n=this,e=n.$createElement,i=n._self._c||e;return i("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[i("h1",{attrs:{id:"_43-nginx"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#_43-nginx"}},[n._v("#")]),n._v(" 43-Nginx")]),n._v(" "),i("ol",[i("li",[i("strong",[n._v("Nginx：")]),n._v(" "),i("ol",[i("li",[i("strong",[n._v("轻量级的Web服务器、反向代理服务器。 "),i("strong",[n._v("内存占用少，启动极快，高并发能力强，在互联网项目中广泛应用.")])])]),n._v(" "),i("li",[n._v("Nginx是一款面向性能设计的HTTP服务器，一个邮件代理服务器和一个通用的TCP / UDP代理服务器，一个异步框架的")]),n._v(" "),i("li",[n._v("Nginx使用异步事件驱动的方法来处理请求。Nginx的模块化事件驱动架构可以在高负载下提供更可预测的性能。")]),n._v(" "),i("li",[n._v("Nginx在官方测试的结果中，能够支持五万个并行连接，而在实际的运作中，可以支持二万至四万个并行连接。")]),n._v(" "),i("li",[n._v("Nginx提供缓存机制，可以加快访问速度")])])]),n._v(" "),i("li",[n._v("Nginx的Master-Worker模式\n"),i("ol",[i("li",[n._v("启动Nginx后，其实就是在80端口启动了Socket服务进行监听，Nginx涉及Master进程和Worker进程。\n"),i("ol",[i("li",[n._v("Master进程的作用是？\n"),i("ul",[i("li",[n._v("读取并验证配置文件nginx.conf；管理worker进程；")])])]),n._v(" "),i("li",[n._v("Worker进程的作用是？\n"),i("ul",[i("li",[n._v("每一个Worker进程都维护一个线程（避免线程切换），处理连接和请求；注意Worker进程的个数由配置文件决定，一般和CPU个数相关")])])])])]),n._v(" "),i("li",[n._v("Nginx 热部署  nginx reload\n"),i("ol",[i("li",[n._v("master进程检查配置的正确性，如果不正确则不reload，nginx按照原配置工作。")]),n._v(" "),i("li",[n._v("如果正确，则nginx启动新的worker，采用新的配置文件。")]),n._v(" "),i("li",[n._v("nginx将新的请求分配给新的worker。")]),n._v(" "),i("li",[n._v("nginx等以前的worker处理完旧的请求，关闭以前的woker。")]),n._v(" "),i("li",[n._v("重复上面过程，直到全部旧的worker进程都被关闭掉")])])]),n._v(" "),i("li",[n._v("Nginx高并发下的有效处理\n"),i("ol",[i("li",[n._v("Nginx采用了Linux的epoll模型，epoll模型基于事件驱动机制，它可以监控多个事件是否准备完毕，如果OK，那么放入epoll队列中，这个过程是异步的。worker只需要从epoll队列循环处理即可")])])])])]),n._v(" "),i("li",[n._v("Nginx挂了怎么办\n"),i("ol",[i("li",[i("strong",[n._v("Keepalived+Nginx实现高可用")]),n._v(" "),i("ol",[i("li",[n._v("请求不要直接打到Nginx上，应该先通过Keepalived（这就是所谓虚拟IP，VIP）")]),n._v(" "),i("li",[n._v("Keepalived应该能监控Nginx的生命状态（提供一个用户自定义的脚本，定期检查Nginx进程状态，进行权重变化,从而实现Nginx故障切换）")])])])])]),n._v(" "),i("li",[n._v("负载均衡四种调度算法\n"),i("ol",[i("li",[n._v("weight 轮询（默认）。每个请求按时间顺序逐一分配到不同的后端服务器。weight。指定轮询权值，weight值越大，分配到的访问机率越高，主要用于后端每个服务器性能不均的情况下")]),n._v(" "),i("li",[n._v("ip_hash")]),n._v(" "),i("li",[n._v("fair")]),n._v(" "),i("li",[n._v("url_hash. 须安装Nginx 的hash软件包")])])]),n._v(" "),i("li",[n._v("upstream其他参数\n"),i("ol",[i("li",[n._v("down，表示当前的server暂时不参与负载均衡。")]),n._v(" "),i("li",[n._v("backup，预留的备份机器。当其他所有的非backup机器出现故障或者忙的时候，才会请求backup机器，因此这台机器的压力最轻。")]),n._v(" "),i("li",[n._v("max_fails，允许请求失败的次数，默认为1。当超过最大次数时，返回proxy_next_upstream 模块定义的错误。")]),n._v(" "),i("li",[n._v("fail_timeout，在经历了max_fails次失败后，暂停服务的时间。max_fails可以和fail_timeout一起使用")]),n._v(" "),i("li",[n._v("当负载调度算法为ip_hash时，后端服务器在负载均衡调度中的状态不能是down和backup")])])]),n._v(" "),i("li",[n._v("反向代理 / 正向代理\n"),i("ol",[i("li",[n._v("反向\n"),i("ol",[i("li",[n._v("客户端不需要配置，直接访问域名或ip，由代理服务器进行分发")]),n._v(" "),i("li",[n._v("服务端不可见")]),n._v(" "),i("li",[n._v("反向代理中，proxy和server同属一个LAN，对client透明")])])]),n._v(" "),i("li",[n._v("正向\n"),i("ol",[i("li",[n._v("客户端需要一些配置，代理服务器将请求分发。")]),n._v(" "),i("li",[n._v("客户端不可见")]),n._v(" "),i("li",[n._v("正向代理中，proxy和client同属一个LAN，对server透明")])])])])])]),n._v(" "),i("p",[i("strong",[n._v("main(全局设置)****、"),i("strong",[i("strong",[n._v("events(nginx工作模式)")])]),n._v("、"),i("strong",[i("strong",[n._v("http(http设置)")])]),n._v("、")])]),n._v(" "),i("p",[i("strong",[n._v("sever(主机设置)****、"),i("strong",[i("strong",[n._v("location(URL匹配)")])]),n._v("、"),i("strong",[i("strong",[n._v("upstream(负载均衡服务器设置)")])]),n._v("。")])]),n._v(" "),i("div",{staticClass:"language- extra-class"},[i("pre",{pre:!0,attrs:{class:"language-text"}},[i("code",[n._v('    # main\n    \n    user nobody nobody;\n    worker_processes 2;\n    error_log /usr/local/var/log/nginx/error.log notice;\n    pid /usr/local/var/run/nginx/nginx.pid;\n    worker_rlimit_nofile 1024;\n    events {\n        use kqueue; #mac平台 / linux 一般使用 epoll\n        worker_connections 1024;\n    }\n\n    http{\n        include mime.types;\n        default_type application/octet-stream;\n        log_format main \'$remote_addr - $remote_user [$time_local] "$request" \'\n                        \'$status $body_bytes_sent "$http_referer" \'\n                        \'"$http_user_agent" "$http_x_forwarded_for"\';\n        access_log /usr/local/var/log/nginx/access.log main;\n        sendfile on;\n        tcp_nopush on;\n        tcp_nodelay on;\n        keepalive_timeout 10;\n        #gzip on;\n        upstream myproject {\n        .....\n        }\n        server {\n        ....\n        }\n    }\n\n----------------------------------------------------------------------\n\n    # 负载均衡\n    upstream dcp{\n         ip_hash\nserver 10.211.55.2:8001; # 此处为uwsgi运行的ip地址和端口号\n# 如果有多台服务器，可以在此处继续添加服务器地址\n}\n\nserver {\nlisten 80;\nserver_name dcp.linkdoc.com;\n\n#charset koi8-r;\n\naccess_log logs/host.access.log main;\n        location /xadmin {\nproxy_pass dcp;\n}\n        \n        # 开启正则匹配\nlocation ~ \\.py {\nproxy_pass dcp;\n}\n\n# root 说明是静态资源\n        location / {\nroot /home/python/Desktop/front_end_pc;\nindex index.html index.htm;\n}\n\nerror_page 500 502 503 504 /50x.html;\nlocation = /50x.html {\nroot html;\n}\n\n}\n')])])])])}),[],!1,null,null,null);e.default=l.exports}}]);