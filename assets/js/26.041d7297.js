(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{392:function(t,n,a){"use strict";a.r(n);var s=a(44),e=Object(s.a)({},(function(){var t=this,n=t.$createElement,a=t._self._c||n;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"进阶操作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#进阶操作"}},[t._v("#")]),t._v(" 进阶操作")]),t._v(" "),a("ul",[a("li",[a("h1",{attrs:{id:"进阶操作-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#进阶操作-2"}},[t._v("#")]),t._v(" 进阶操作")]),t._v(" "),a("ul",[a("li",[t._v("bulk_write")]),t._v(" "),a("li",[t._v("InsertOne, DeleteOne, ReplaceOne")])]),t._v(" "),a("h1",{attrs:{id:"mongodb权威指南"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mongodb权威指南"}},[t._v("#")]),t._v(" MongoDB权威指南")]),t._v(" "),a("ul",[a("li",[t._v("mongo shell 插入的数字都是浮点型")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("引用：“shell中的数字都被MongoDB当作是双精度数。这意味着如果你从数据库中获得的是一个32位整数，修改文档后，将文档存回数据库的时候，这个整数也就被换成了浮点数，即便保持这个整数原封不动也会这样的。”\n\n参考：《MongoDB权威指南》第一版\n")])])]),a("h1",{attrs:{id:"分片"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分片"}},[t._v("#")]),t._v(" 分片")]),t._v(" "),a("h3",{attrs:{id:"慢查询监控"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#慢查询监控"}},[t._v("#")]),t._v(" 慢查询监控")]),t._v(" "),a("ul",[a("li",[a("h4",{attrs:{id:"profiling级别说明"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#profiling级别说明"}},[t._v("#")]),t._v(" Profiling级别说明")])])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('0：关闭，不收集任何数据。\n1：收集慢查询数据，默认是100毫秒。\n2：收集所有数据\n\n\n#查看状态：级别和时间\nPRIMARY> db.getProfilingStatus()\n{ "was" : 1, "slowms" : 200 }\n#查看级别\nPRIMARY> db.getProfilingLevel()\n1\n#设置级别\nPRIMARY> db.setProfilingLevel(2)\n{ "was" : 1, "slowms" : 100, "ok" : 1 }\n#设置级别和时间\nPRIMARY> db.setProfilingLevel(1,200)\n{ "was" : 2, "slowms" : 100, "ok" : 1 }\n\n\ndb.system.profile.find().pretty()\n')])])]),a("h3",{attrs:{id:"使用javascript操作mongodb"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用javascript操作mongodb"}},[t._v("#")]),t._v(" 使用JavaScript操作MongoDB")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("\n")])])]),a("h3",{attrs:{id:"查看数据库空间大小"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#查看数据库空间大小"}},[t._v("#")]),t._v(" 查看数据库空间大小")]),t._v(" "),a("ul",[a("li",[t._v("db.stats();")])]),t._v(" "),a("div",{staticClass:"language-json extra-class"},[a("pre",{pre:!0,attrs:{class:"language-json"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"db"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"xxx"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//当前数据库")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"collections"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("27")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//当前数据库多少表 ")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"objects"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("18738550")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//当前数据库所有表多少条数据")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"avgObjSize"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1153.54876188392")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//每条数据的平均大小")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"dataSize"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("21615831152.0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//所有数据的总大小")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"storageSize"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("23223312272.0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//所有数据占的磁盘大小 ")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"numExtents"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("121")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"indexes"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("26")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//索引数 ")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"indexSize"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("821082976")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//索引大小 ")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"fileSize"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("25691160576.0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//预分配给数据库的文件大小")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"nsSizeMB"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("16")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"dataFileVersion"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"major"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"minor"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"extentFreeList"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"num"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"totalSize"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("65536")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"ok"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.0")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h3",{attrs:{id:"mongodb-执行计划-1"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mongodb-执行计划-1"}},[t._v("#")]),t._v(" MongoDB 执行计划 "),a("a",{attrs:{href:"https://segmentfault.com/a/1190000012208991",target:"_blank",rel:"noopener noreferrer"}},[t._v("1"),a("OutboundLink")],1)]),t._v(" "),a("ul",[a("li",[a("p",[t._v("db.collection.explain()")])]),t._v(" "),a("li",[a("p",[t._v('db.collection.explain("executionStats")')])]),t._v(" "),a("li",[a("p",[a("a",{attrs:{href:"http://xstarcd.github.io/wiki/sysadmin/mongodb_slowlog.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("慢查询日志"),a("OutboundLink")],1)])]),t._v(" "),a("li",[a("h2",{attrs:{id:"引子"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#引子"}},[t._v("#")]),t._v(" 引子")])])]),t._v(" "),a("p",[t._v("MongoDB 3.0之后，\bexplain的返回与使用方法与之前版本有了不少变化，介于3.0之后的优秀特色，本文仅针对MongoDB 3.0+的explain进行讨论。")]),t._v(" "),a("p",[t._v("现版本explain有三种模式，分别如下：")]),t._v(" "),a("ul",[a("li",[t._v("queryPlanner")]),t._v(" "),a("li",[t._v("executionStats")]),t._v(" "),a("li",[t._v("allPlansExecution")])]),t._v(" "),a("h2",{attrs:{id:"正文"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#正文"}},[t._v("#")]),t._v(" 正文")]),t._v(" "),a("h3",{attrs:{id:"queryplanner"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#queryplanner"}},[t._v("#")]),t._v(" queryPlanner")]),t._v(" "),a("p",[t._v("queryPlanner是现版本explain的默认模式，queryPlanner模式下并不会去真正进行query语句查询，而是针对query语句进行执行计划分析并选出winning plan。")]),t._v(" "),a("p",[t._v("先来看queryPlanner模式的各个返回意义。")]),t._v(" "),a("p",[a("strong",[t._v("explain.queryPlanner")])]),t._v(" "),a("p",[t._v("queryPlanner的返回。")]),t._v(" "),a("p",[a("strong",[t._v("explain.queryPlanner.namespace")])]),t._v(" "),a("p",[t._v("顾名思义，该值返回的是该query所查询的表。")]),t._v(" "),a("p",[a("strong",[t._v("explain.queryPlanner.indexFilterSet")])]),t._v(" "),a("p",[t._v("针对该query是否有indexfilter（会在后文进行详细解释）。")]),t._v(" "),a("p",[a("strong",[t._v("explain.queryPlanner.winningPlan")])]),t._v(" "),a("p",[t._v("查询优化器针对该query所返回的最优执行计划的详细内容。")]),t._v(" "),a("p",[a("strong",[t._v("explain.queryPlanner.winningPlan.stage")])]),t._v(" "),a("p",[t._v("最优执行计划的stage，这里返回是FETCH，可以理解为通过返回的index位置去检索具体的文档（stage有数个模式，将在后文中进行详解）。")]),t._v(" "),a("p",[a("strong",[t._v("explain.queryPlanner.winningPlan.inputStage")])]),t._v(" "),a("p",[t._v("explain.queryPlanner.winningPlan.stage的child stage，此处是IXSCAN，表示进行的是index scanning。")]),t._v(" "),a("p",[a("strong",[t._v("explain.queryPlanner.winningPlan.keyPattern")])]),t._v(" "),a("p",[t._v("所扫描的index内容，此处是w:1与n:1。")]),t._v(" "),a("p",[a("strong",[t._v("explain.queryPlanner.winningPlan.indexName")])]),t._v(" "),a("p",[t._v("winning plan所选用的index。")]),t._v(" "),a("p",[a("strong",[t._v("explain.queryPlanner.winningPlan.isMultiKey")])]),t._v(" "),a("p",[t._v("是否是Multikey，此处返回是false，如果索引建立在array上，此处将是true。")]),t._v(" "),a("p",[a("strong",[t._v("explain.queryPlanner.winningPlan.direction")])]),t._v(" "),a("p",[t._v("此query的查询顺序，此处是forward，如果用了.sort({w:-1})将显示backward。")]),t._v(" "),a("p",[a("strong",[t._v("explain.queryPlanner.winningPlan.indexBounds")])]),t._v(" "),a("p",[t._v("winningplan所扫描的索引范围，此处查询条件是w:1,使用的index是w与n的联合索引，故w是[1.0,1.0]而n没有指定在查询条件中，故是[MinKey,MaxKey]。")]),t._v(" "),a("p",[a("strong",[t._v("explain.queryPlanner.rejectedPlans")])]),t._v(" "),a("p",[t._v("其他执行计划（非最优而被查询优化器reject的）的详细返回，其中具体信息与winningPlan的返回中意义相同，故不在此赘述。")]),t._v(" "),a("h3",{attrs:{id:"executionstats"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#executionstats"}},[t._v("#")]),t._v(" executionStats")]),t._v(" "),a("p",[t._v("executionStats的返回中多了如下：")]),t._v(" "),a("p",[t._v("executionStats\b模式中，我们主要需要注意的返回有如下几个")]),t._v(" "),a("p",[a("strong",[t._v("executionStats.executionSuccess")])]),t._v(" "),a("p",[t._v("是否执行成功")]),t._v(" "),a("p",[a("strong",[t._v("executionStats.nReturned")])]),t._v(" "),a("p",[t._v("查询的返回条数")]),t._v(" "),a("p",[a("strong",[t._v("executionStats.executionTimeMillis")])]),t._v(" "),a("p",[t._v("整体执行时间")]),t._v(" "),a("p",[a("strong",[t._v("executionStats.totalKeysExamined")])]),t._v(" "),a("p",[t._v("索引扫描次数")]),t._v(" "),a("p",[a("strong",[t._v("executionStats.totalDocsExamined")])]),t._v(" "),a("p",[t._v("document扫描次数")]),t._v(" "),a("p",[t._v("以上几个非常好理解，我们就不在这里详述，后文的案例中会有分析。")]),t._v(" "),a("p",[a("strong",[t._v("executionStats.executionStages.stage")])]),t._v(" "),a("p",[t._v("这里是FETCH去扫描对于documents")]),t._v(" "),a("p",[a("strong",[t._v("executionStats.executionStages.nReturned")])]),t._v(" "),a("p",[t._v("由于是FETCH，所以这里该值与executionStats.nReturned一致")]),t._v(" "),a("p",[a("strong",[t._v("executionStats.executionStages.docsExamined")])]),t._v(" "),a("p",[t._v("与executionStats.totalDocsExamined一致")]),t._v(" "),a("p",[a("strong",[t._v("executionStats.inputStage")]),t._v("中的与上述理解方式相同")]),t._v(" "),a("p",[t._v("还有一些文档中没有描述的返回如：")]),t._v(" "),a("p",[t._v("“works” : 29862,")]),t._v(" "),a("p",[t._v("“advanced” : 29861,")]),t._v(" "),a("p",[t._v("“isEOF” : 1,")]),t._v(" "),a("p",[t._v("这些值都会在explan之初初始化：")]),t._v(" "),a("p",[t._v("mongo/src/mongo/db/exec/plan_stats.h")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CommonStats")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("CommonStats")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" type"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("stageTypeStr")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("type"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("works")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("yields")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("unyields")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("invalidates")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("advanced")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("needTime")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("needYield")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("executionTimeMillis")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("isEOF")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("false"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),a("p",[t._v("以works为例，查看源码中发现，每次操作会加1，且会把执行时间记录在executionTimeMillis中。")]),t._v(" "),a("p",[t._v("mongo/src/mongo/db/exec/fetch.cpp")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("      ++_commonStats.works;\n\n      // Adds the amount of time taken by work() to executionTimeMillis.\n      ScopedTimer timer(&_commonStats.executionTimeMillis);\n")])])]),a("p",[t._v("而在查询结束EOF，works又会加1，advanced不加。")]),t._v(" "),a("p",[t._v("mongo/src/mongo/db/exec/eof.cpp")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("PlanStage::StageState EOFStage::work(WorkingSetID* out) {\n  ++_commonStats.works;\n  // Adds the amount of time taken by work() to executionTimeMillis.\n  ScopedTimer timer(&_commonStats.executionTimeMillis);\n  return PlanStage::IS_EOF;\n  }\n")])])])])]),t._v(" "),a("p",[t._v("故正常的返回works会比nReturned多1，这时候isEOF为true（1）：")]),t._v(" "),a("p",[t._v("mongo/src/mongo/db/exec/eof.cpp")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("bool EOFStage::isEOF() {\n  return true;\n  }\n\n  unique_ptr EOFStage::getStats() {\n      _commonStats.isEOF = isEOF();\n      return make_unique(_commonStats, STAGE_EOF);\n  }\n")])])]),a("p",[t._v("advanced的返回值在命中的时候+1，在skip,eof的时候不会增加如：")]),t._v(" "),a("p",[t._v("mongo/src/mongo/db/exec/skip.cpp")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("if (PlanStage::ADVANCED == status) {\n      // If we're still skipping results...\n      if (_toSkip > 0) {\n          // ...drop the result.\n          --_toSkip;\n          _ws->free(id);\n          ++_commonStats.needTime;\n          return PlanStage::NEED_TIME;\n      }\n\n      *out = id;\n      ++_commonStats.advanced;\n      return PlanStage::ADVANCED;\n\n")])])]),a("h3",{attrs:{id:"indexfilter"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#indexfilter"}},[t._v("#")]),t._v(" IndexFilter")]),t._v(" "),a("p",[t._v("IndexFilter决定了查询优化器对于某一类型的查询将如何使用index，indexFilter仅影响查询优化器对于该类查询可以用尝试哪些index的执行计划分析，查询优化器还是根据分析情况选择最优计划。")]),t._v(" "),a("p",[t._v("如果某一类型的查询设定了IndexFilter，那么执行时通过hint指定了其他的index，查询优化器将会忽略hint所设置index，仍然使用indexfilter中设定的查询计划。")]),t._v(" "),a("p",[t._v("IndexFilter可以通过命令移除，也将在实例重启后清空。")]),t._v(" "),a("h4",{attrs:{id:"indexfilter的创建"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#indexfilter的创建"}},[t._v("#")]),t._v(" IndexFilter的创建")]),t._v(" "),a("p",[t._v("可以通过如下命令为某一个collection建立indexFilter")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('db.runCommand(\n  {\n      planCacheSetFilter: <collection>,\n      query: <query>,\n      sort: <sort>,\n      projection: <projection>,\n      indexes: [ <index1>, <index2>, ...]\n  }\n)\n\ndb.runCommand(\n  {\n      planCacheSetFilter: "orders",\n      query: { status: "A" },\n      indexes: [\n          { cust_id: 1, status: 1 },\n          { status: 1, order_date: -1 }\n      ]\n  }\n)\n')])])]),a("p",[t._v("上图针对orders表建立了一个indexFilter，indexFilter指定了对于orders表只有status条件（仅对status进行查询，无sort等）的查询的indexes，故下图的查询语句的查询优化器仅仅会从"),a("code",[t._v("{cust_id:1,status:1}")]),t._v("和"),a("code",[t._v("{status:1,order_date:-1}")]),t._v("中进行winning plan的选择")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('db.orders.find( { status: "D" } )\ndb.orders.find( { status: "P" } )\n')])])]),a("h5",{attrs:{id:"indexfilter的列表"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#indexfilter的列表"}},[t._v("#")]),t._v(" indexFilter的列表")]),t._v(" "),a("p",[t._v("可以通过如下命令展示某一个collecton的所有indexFilter")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("db.runCommand( { planCacheListFilters:  } )\n")])])]),a("h5",{attrs:{id:"indexfilter的删除"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#indexfilter的删除"}},[t._v("#")]),t._v(" indexFilter的删除")]),t._v(" "),a("p",[t._v("可以通过如下命令对IndexFilter进行删除")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("db.runCommand(\n {\n    planCacheClearFilters: <collection>,\n    query: <query pattern>,\n    sort: <sort specification>,\n    projection: <projection specification>\n }\n)\n")])])]),a("h3",{attrs:{id:"stage的意义"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#stage的意义"}},[t._v("#")]),t._v(" Stage的意义")]),t._v(" "),a("p",[t._v("如"),a("strong",[t._v("explain.queryPlanner.winningPlan.stage")]),t._v("和"),a("strong",[t._v("explain.queryPlanner.winningPlan.inputStage")]),t._v("等。")]),t._v(" "),a("p",[t._v("文档中仅有如下几类介绍")]),t._v(" "),a("p",[a("strong",[t._v("COLLSCAN")])]),t._v(" "),a("p",[t._v("全表扫描")]),t._v(" "),a("p",[a("strong",[t._v("IXSCAN")])]),t._v(" "),a("p",[t._v("索引扫描")]),t._v(" "),a("p",[a("strong",[t._v("FETCH")])]),t._v(" "),a("p",[t._v("根据索引去检索指定document")]),t._v(" "),a("p",[a("strong",[t._v("SHARD_MERGE")])]),t._v(" "),a("p",[t._v("将各个分片返回数据进行merge")]),t._v(" "),a("p",[t._v("但是根据源码中的信息，个人还总结了文档中没有的如下几类(常用如下，由于是通过源码查找，可能有所遗漏)")]),t._v(" "),a("p",[a("strong",[t._v("SORT")])]),t._v(" "),a("p",[t._v("表明在内存中进行了排序（与老版本的scanAndOrder:true一致）")]),t._v(" "),a("p",[a("strong",[t._v("LIMIT")])]),t._v(" "),a("p",[t._v("使用limit限制返回数")]),t._v(" "),a("p",[a("strong",[t._v("SKIP")])]),t._v(" "),a("p",[t._v("使用skip进行跳过")]),t._v(" "),a("p",[a("strong",[t._v("IDHACK")])]),t._v(" "),a("p",[t._v("针对_id进行查询")]),t._v(" "),a("p",[a("strong",[t._v("SHARDING_FILTER")])]),t._v(" "),a("p",[t._v("通过mongos对分片数据进行查询")]),t._v(" "),a("p",[a("strong",[t._v("COUNT")])]),t._v(" "),a("p",[t._v("利用db.coll.explain().count()之类进行count运算")]),t._v(" "),a("p",[a("strong",[t._v("COUNTSCAN")])]),t._v(" "),a("p",[t._v("count不使用用Index进行count时的stage返回")]),t._v(" "),a("p",[a("strong",[t._v("COUNT_SCAN")])]),t._v(" "),a("p",[t._v("count使用了Index进行count时的stage返回")]),t._v(" "),a("p",[a("strong",[t._v("SUBPLA")])]),t._v(" "),a("p",[t._v("未使用到索引的$or查询的stage返回")]),t._v(" "),a("p",[a("strong",[t._v("TEXT")])]),t._v(" "),a("p",[t._v("使用全文索引进行查询时候的stage返回")]),t._v(" "),a("p",[a("strong",[t._v("PROJECTION")])]),t._v(" "),a("p",[t._v("限定返回字段时候stage的返回")]),t._v(" "),a("h3",{attrs:{id:"allplansexecution"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#allplansexecution"}},[t._v("#")]),t._v(" allPlansExecution")]),t._v(" "),a("p",[t._v("顾名思义，allPlansExecution模式是将所有的执行计划均进行executionStats模式的操作，不在此赘述了。")]),t._v(" "),a("h3",{attrs:{id:"对explain返回逐层分析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#对explain返回逐层分析"}},[t._v("#")]),t._v(" 对Explain返回逐层分析")]),t._v(" "),a("h4",{attrs:{id:"第一层-executiontimemillis。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第一层-executiontimemillis。"}},[t._v("#")]),t._v(" 第一层，executionTimeMillis。")]),t._v(" "),a("p",[t._v("首先，\b最为直观explain返回值是"),a("strong",[t._v("executionTimeMillis")]),t._v("值，指的是我们这条语句的执行时间，这个值当然是希望越少越好。")]),t._v(" "),a("p",[t._v("且"),a("strong",[t._v("executionTimeMillis")]),t._v(" 与stage有同样的层数，即：")]),t._v(" "),a("p",[t._v("其中有3个"),a("strong",[t._v("executionTimeMillis")]),t._v("，分别是")]),t._v(" "),a("p",[a("strong",[t._v("executionStats.executionTimeMillis")])]),t._v(" "),a("p",[t._v("该query的整体查询时间")]),t._v(" "),a("p",[a("strong",[t._v("executionStats.executionStages.executionTimeMillis")])]),t._v(" "),a("p",[t._v("该查询根据index去检索document获取29861条具体数据的时间")]),t._v(" "),a("p",[a("strong",[t._v("executionStats.executionStages.inputStage.executionTimeMillis")])]),t._v(" "),a("p",[t._v("该查询扫描29861行index所用时间")]),t._v(" "),a("p",[t._v("这三个值我们都希望越少越好，那么是什么影响这这三个返回值呢？")]),t._v(" "),a("p",[t._v("抛开硬件因素等不谈，我们来进行下一层的剥离。")]),t._v(" "),a("p",[t._v("#### 第二层，index与document扫描数与查询返回条目数")]),t._v(" "),a("p",[t._v("这里主要谈3个返回项，nReturned，totalKeysExamined与totalDocsExamined，分别代表该条查询返回的条目、索引扫描条目和文档扫描条目。")]),t._v(" "),a("p",[t._v("很好理解，这些都直观的影响到executionTimeMillis，\b我们需要扫描的越少速度越快。")]),t._v(" "),a("p",[t._v("对于一个查询， 我们最理想的状态是")]),t._v(" "),a("p",[t._v("nReturned=totalKeysExamined & totalDocsExamined=0")]),t._v(" "),a("p",[t._v("（cover index，仅仅使用到了index，无需文档扫描，这是最理想状态。）")]),t._v(" "),a("p",[t._v("或者")]),t._v(" "),a("p",[t._v("nReturned=totalKeysExamined=totalDocsExamined(需要具体情况具体分析)")]),t._v(" "),a("p",[t._v("（正常index利用，无多余index扫描与文档扫描。）")]),t._v(" "),a("p",[t._v("如果有sort的时候，为了使得sort不在内存中进行，我们可以在保证nReturned=totalDocsExamined")]),t._v(" "),a("p",[t._v("的基础上，totalKeysExamined可以大于totalDocsExamined与nReturned，因为量级较大的时候内存排序非常消耗性能。")]),t._v(" "),a("p",[t._v("后面我们\b会针对例子来进行分析。")]),t._v(" "),a("h4",{attrs:{id:"第三层-stage状态分析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第三层-stage状态分析"}},[t._v("#")]),t._v(" 第三层，Stage状态分析")]),t._v(" "),a("p",[t._v("那么又是什么影响到了totalKeysExamined与totalDocsExamined呢？就是Stage的类型，Stage的具体含义在上文中有提及，如果认真看的同学就不难理解为何Stage会影响到totalKeysExamined 和totalDocsExamined从而影响executionTimeMillis了。")]),t._v(" "),a("p",[t._v("此前有讲解过stage的类型，这里再简单列举下（具体意义请看上文）")]),t._v(" "),a("p",[a("strong",[t._v("COLLSCAN")])]),t._v(" "),a("p",[a("strong",[t._v("IXSCAN")])]),t._v(" "),a("p",[a("strong",[t._v("FETCH")])]),t._v(" "),a("p",[a("strong",[t._v("SHARD_MERGE")])]),t._v(" "),a("p",[a("strong",[t._v("SORT")])]),t._v(" "),a("p",[a("strong",[t._v("LIMIT")])]),t._v(" "),a("p",[a("strong",[t._v("SKIP")])]),t._v(" "),a("p",[a("strong",[t._v("IDHACK")])]),t._v(" "),a("p",[a("strong",[t._v("SHARDING_FILTER")])]),t._v(" "),a("p",[a("strong",[t._v("COUNT")])]),t._v(" "),a("p",[a("strong",[t._v("COUNTSCAN")])]),t._v(" "),a("p",[a("strong",[t._v("COUNT_SCAN")])]),t._v(" "),a("p",[a("strong",[t._v("SUBPLA")])]),t._v(" "),a("p",[a("strong",[t._v("TEXT")])]),t._v(" "),a("p",[a("strong",[t._v("PROJECTION")])]),t._v(" "),a("h4",{attrs:{id:"对于普通查询-我们最希望看到的组合有这些"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#对于普通查询-我们最希望看到的组合有这些"}},[t._v("#")]),t._v(" 对于普通查询，我们最希望看到的组合有这些：")]),t._v(" "),a("p",[t._v("Fetch+IDHACK")]),t._v(" "),a("p",[t._v("Fetch+ixscan")]),t._v(" "),a("p",[t._v("Limit+（Fetch+ixscan）")]),t._v(" "),a("p",[t._v("PROJECTION+ixscan")]),t._v(" "),a("p",[t._v("SHARDING_FILTER+ixscan")]),t._v(" "),a("p",[t._v("等")]),t._v(" "),a("h4",{attrs:{id:"不希望看到包含如下的stage"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#不希望看到包含如下的stage"}},[t._v("#")]),t._v(" 不希望看到包含如下的stage：")]),t._v(" "),a("p",[t._v("COLLSCAN（全表扫），SORT（使用sort但是无index），不合理的SKIP，SUBPLA（未用到index的$or）")]),t._v(" "),a("h4",{attrs:{id:"对于count查询-希望看到的有"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#对于count查询-希望看到的有"}},[t._v("#")]),t._v(" 对于count查询，希望看到的有：")]),t._v(" "),a("p",[t._v("COUNT_SCAN")]),t._v(" "),a("h4",{attrs:{id:"不希望看到的有"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#不希望看到的有"}},[t._v("#")]),t._v(" 不希望看到的有:")]),t._v(" "),a("p",[t._v("COUNTSCAN")]),t._v(" "),a("h3",{attrs:{id:"explain分析实例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#explain分析实例"}},[t._v("#")]),t._v(" Explain分析实例")]),t._v(" "),a("p",[t._v("表中数据如下(简单测试用例，仅10条数据，主要是对explain分析的逻辑进行解析)：")]),t._v(" "),a("p",[t._v("综上可以有一个小结论，当查询覆盖精确匹配，范围查询与排序的时候，")]),t._v(" "),a("p",[a("code",[t._v("精确匹配字段,排序字段,范围查询字段,")]),t._v("这样的索引排序会更为高效")]),t._v(" "),a("ul",[a("li",[a("h1",{attrs:{id:"大坑"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#大坑"}},[t._v("#")]),t._v(" 大坑")]),t._v(" "),a("h2",{attrs:{id:"问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#问题"}},[t._v("#")]),t._v(" 问题")]),t._v(" "),a("ol",[a("li",[t._v("MongoDB建索引导致CPU 100%\n"),a("ol",[a("li",[t._v("查询正在建索引的op"),a("div",{staticClass:"language-json extra-class"},[a("pre",{pre:!0,attrs:{class:"language-json"}},[a("code",[t._v("db.currentOp(\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      $or"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" op"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"command"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"query.createIndexes"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" $exists"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" op"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"none"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ns"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" /\\.system\\.indexes\\b/ "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n)\n")])])])]),t._v(" "),a("li",[t._v("杀掉对应的op"),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("db.killOp(opid)\n")])])])]),t._v(" "),a("li",[t._v("如果找不到opid, 可以rename当前collection终止建立索引操作, 等待几分钟恢复到原collection"),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('db.collection.renameCollection("new_collection")\n')])])])])])]),t._v(" "),a("li",[t._v("reIndex\n"),a("ol",[a("li",[t._v("不同版本之间, reIndex的 exclusive lock不同, 但是还是不推荐使用, 就想官方文档所说, 太昂贵")])])])])])])])}),[],!1,null,null,null);n.default=e.exports}}]);