(window.webpackJsonp=window.webpackJsonp||[]).push([[122],{498:function(e,r,t){"use strict";t.r(r);var _=t(44),v=Object(_.a)({},(function(){var e=this,r=e.$createElement,t=e._self._c||r;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"安装"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#安装"}},[e._v("#")]),e._v(" 安装")]),e._v(" "),t("h2",{attrs:{id:"centos-安装docker"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#centos-安装docker"}},[e._v("#")]),e._v(" CentOS 安装docker")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("# 查看内核版本\nuname -r \n")])])]),t("h3",{attrs:{id:"启动服务"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#启动服务"}},[e._v("#")]),e._v(" 启动服务")]),e._v(" "),t("ul",[t("li",[e._v("service docker start")]),e._v(" "),t("li",[e._v("自动启动")]),e._v(" "),t("li",[e._v("su root # 先切换到root用户, 再执行以下命令")]),e._v(" "),t("li",[e._v("systemctl enable docker # 开机自动启动docker")]),e._v(" "),t("li",[e._v("systemctl start docker # 启动docker")]),e._v(" "),t("li",[e._v("systemctl restart docker # 重启dokcer")])]),e._v(" "),t("h3",{attrs:{id:"搭建registry"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#搭建registry"}},[e._v("#")]),e._v(" 搭建registry")]),e._v(" "),t("ul",[t("li",[e._v("docker run -d -p 5000:5000 --restart always --name registry registry:2")]),e._v(" "),t("li",[e._v("使用V2版本的 registry")]),e._v(" "),t("li",[e._v("启动UI界面")]),e._v(" "),t("li",[e._v("docker run -d -p 8080:8080 --name registry-web --link registry -e REGISTRY_URL=http://registry:5000/v2 -e REGISTRY_NAME=localhost:5000 hyper/docker-registry-web")]),e._v(" "),t("li",[e._v("上传")]),e._v(" "),t("li",[e._v("命令\n"),t("ul",[t("li",[e._v("docker tag athena:0.1 127.0.0.1:5000/athena:0.1")]),e._v(" "),t("li",[e._v("docker push 127.0.0.1:5000/athena")])])]),e._v(" "),t("li",[e._v("需要修改镜像名\n"),t("ul",[t("li",[e._v("格式为 "),t("code",[e._v("docker tag IMAGE[:TAG] [REGISTRY_HOST[:REGISTRY_PORT]/]REPOSITORY[:TAG]")])])])])]),e._v(" "),t("h3",{attrs:{id:"常用命令"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#常用命令"}},[e._v("#")]),e._v(" 常用命令")]),e._v(" "),t("ul",[t("li",[e._v("列出镜像")]),e._v(" "),t("li",[e._v("docker system df\n"),t("ul",[t("li",[e._v("查看镜像，容器，数据卷所占用的空间")])])]),e._v(" "),t("li",[e._v("docker image ls -f since=mongo:3.2\n"),t("ul",[t("li",[e._v("某个tag之后建立的")]),e._v(" "),t("li",[e._v("before")]),e._v(" "),t("li",[e._v("options")]),e._v(" "),t("li",[e._v("-f\n"),t("ul",[t("li",[e._v("过滤条件")])])]),e._v(" "),t("li",[e._v("-q\n"),t("ul",[t("li",[e._v("只显示 ID")])])])])]),e._v(" "),t("li",[e._v("删除镜像")]),e._v(" "),t("li",[e._v("docker rmi …..\n"),t("ul",[t("li",[e._v("docker image rm $(docker image ls -q redis)")])])]),e._v(" "),t("li",[e._v("docker image rm 504\n"),t("ul",[t("li",[e._v("删除的时候可以用短 id ，只要足够区分于别的镜像就可以")])])]),e._v(" "),t("li",[e._v("docker image rm centos\n"),t("ul",[t("li",[e._v("也可以使用<仓库名>:<标签>")])])]),e._v(" "),t("li"),e._v(" "),t("li",[e._v("构建镜像")]),e._v(" "),t("li",[e._v("docker commit\n"),t("ul",[t("li",[e._v("使用 "),t("code",[e._v("docker commit")]),e._v(" 意味着所有对镜像的操作都是黑箱操作，生成的镜像也被称为"),t("strong",[e._v("黑箱镜像")])])])])])])}),[],!1,null,null,null);r.default=v.exports}}]);