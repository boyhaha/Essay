(window.webpackJsonp=window.webpackJsonp||[]).push([[127],{507:function(a,e,t){"use strict";t.r(e);var n=t(44),r=Object(n.a)({},(function(){var a=this,e=a.$createElement,t=a._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h2",{attrs:{id:"常用命令"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#常用命令"}},[a._v("#")]),a._v(" 常用命令")]),a._v(" "),t("table",[t("thead",[t("tr",[t("th",[a._v("功能")]),a._v(" "),t("th",[a._v("命令")]),a._v(" "),t("th")])]),a._v(" "),t("tbody",[t("tr",[t("td",[a._v("查看进程打开的文件的工具")]),a._v(" "),t("td",[a._v("lsof -i tcp:8080   / lsof /bin/bash")]),a._v(" "),t("td",[a._v("那些进程打开了 /bin/bash文件")])]),a._v(" "),t("tr",[t("td",[a._v("查看端口状态")]),a._v(" "),t("td",[t("code",[a._v("netstat -anvp tcp | grep 80")])]),a._v(" "),t("td")]),a._v(" "),t("tr",[t("td",[a._v("对关键字进行提取")]),a._v(" "),t("td",[a._v("grep")]),a._v(" "),t("td")])])]),a._v(" "),t("ul",[t("li",[a._v("查看内核版本\n"),t("ul",[t("li",[a._v("cat /proc/version")])])]),a._v(" "),t("li",[a._v("查看内存大小\n"),t("ul",[t("li",[a._v("cat /proc/meminfo |grep MemTotal")])])]),a._v(" "),t("li",[a._v("查看CPU核心数\n"),t("ul",[t("li",[a._v('cat /proc/cpuinfo |grep "cores" | uniq')])])]),a._v(" "),t("li",[a._v("测试TCP连通性\n"),t("ul",[t("li",[t("code",[a._v("telnet <hostname/IP address> <port number>")])])])]),a._v(" "),t("li",[a._v("测试UDP连通性\n"),t("ul",[t("li",[t("code",[a._v("nc -z -v -u <hostname/IP address> <port number>")])])])]),a._v(" "),t("li",[a._v("查看进程打开的文件\n"),t("ul",[t("li",[a._v("lsof(list open files)：查看进程打开的文件的。")]),a._v(" "),t("li",[a._v("在 linux 系统中，一切皆文件。通过文件不仅仅可以访问常规数据，还可以访问网络连接和硬件。所以 lsof 命令不仅可以查看进程打开的文件、目录，还可以查看进程监听的端口等 socket 相关的信息")])])]),a._v(" "),t("li",[a._v("Linux 定时任务\n"),t("ul",[t("li",[t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("crontab [-u username]　　　　//省略用户表表示操作当前用户的crontab\n  -e      (编辑工作表)\n  -l      (列出工作表里的命令)\n  -r      (删除工作)\n\n")])])])]),a._v(" "),t("li",[a._v("crontab的命令构成为 时间+动作，其时间有分、时、日、月、周五种")]),a._v(" "),t("li",[a._v("操作符\n"),t("ul",[t("li",[a._v("取值范围内的所有数字")]),a._v(" "),t("li",[a._v("/ 每过多少个数字")]),a._v(" "),t("li",[a._v("'-' 从X到Z")]),a._v(" "),t("li",[a._v("，散列数字")])])])])])]),a._v(" "),t("h3",{attrs:{id:"命令参数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#命令参数"}},[a._v("#")]),a._v(" 命令参数")]),a._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[a._v("grep")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 可以对关键字进行提取")]),a._v("\n\n    -a 不要忽略二进制数据。 \n    -A"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("显示列数"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" 除了显示符合范本样式的那一行之外，并显示该行之后的内容。 \n    -b 在显示符合范本样式的那一行之外，并显示该行之前的内容。 \n    -c 计算符合范本样式的列数。 \n    -C"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("显示列数"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v("或-"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("显示列数"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" 除了显示符合范本样式的那一列之外，并显示该列之前后的内容。 \n    -d"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("进行动作"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" 当指定要查找的是目录而非文件时，必须使用这项参数，否则grep命令将回报信息并停止动作。 \n    -e"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("范本样式"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" 指定字符串作为查找文件内容的范本样式。 \n    -E 将范本样式为延伸的普通表示法来使用，意味着使用能使用扩展正则表达式。 \n    -f"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("范本文件"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" 指定范本文件，其内容有一个或多个范本样式，让grep查找符合范本条件的文件内容，格式为每一列的范本样式。 \n    -F 将范本样式视为固定字符串的列表。 -G 将范本样式视为普通的表示法来使用。 \n    -h 在显示符合范本样式的那一列之前，不标示该列所属的文件名称。 \n    -H 在显示符合范本样式的那一列之前，标示该列的文件名称。 \n    -i 胡列字符大小写的差别。 \n    -l 列出文件内容符合指定的范本样式的文件名称。 \n    -L 列出文件内容不符合指定的范本样式的文件名称。 \n    -n 在显示符合范本样式的那一列之前，标示出该列的编号。 \n    -q 不显示任何信息。 -R/-r 此参数的效果和指定“-d recurse”参数相同。 \n    -s 不显示错误信息。 \n    -v 反转查找。\n\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("tail")]),a._v("\n\n    -f 循环读取\n    -q 不显示处理信息\n    -v 显示详细的处理信息\n    -c"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("数目"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" 显示的字节数\n    -n"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("行数"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" 显示行数\n    --pid"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("PID 与-f合用,表示在进程ID,PID死掉之后结束. \n    -q, --quiet, --silent 从不输出给出文件名的首部 \n    -s, --sleep-interval"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("S 与-f合用,表示在每次反复的间隔休眠S秒\n")])])]),t("h3",{attrs:{id:"linux"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#linux"}},[a._v("#")]),a._v(" Linux")]),a._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://linuxtools-rst.readthedocs.io/zh_CN/latest/index.html",target:"_blank",rel:"noopener noreferrer"}},[a._v("链接"),t("OutboundLink")],1)])]),a._v(" "),t("h3",{attrs:{id:"_2-crontab"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-crontab"}},[a._v("#")]),a._v(" 2. crontab")]),a._v(" "),t("ul",[t("li",[a._v("环境变量\n"),t("ul",[t("li",[a._v("无法读取系统环境变量, 需要在crontab之前命令之前声明")])])]),a._v(" "),t("li",[a._v("cat /etc/crontab")]),a._v(" "),t("li",[a._v("crontab -e\n"),t("ul",[t("li",[a._v("添加crontab 任务")])])]),a._v(" "),t("li",[a._v("crontab -l\n"),t("ul",[t("li",[a._v("查看正在运行的 任务")])])])]),a._v(" "),t("h3",{attrs:{id:"_3-常用命令"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-常用命令"}},[a._v("#")]),a._v(" 3. 常用命令")]),a._v(" "),t("blockquote",[t("p",[a._v("TODO: 解压，压缩命令")])]),a._v(" "),t("ol",[t("li",[a._v("tar")])]),a._v(" "),t("div",{staticClass:"language-tex tar 解包：tar zxvf FileName.tar extra-class"},[t("pre",{pre:!0,attrs:{class:"language-tex"}},[t("code",[a._v("\n打包：tar czvf FileName.tar DirName\n\ngz命令 　　解压1：gunzip FileName.gz\n\n解压2：gzip -d FileName.gz\n\n压缩：gzip FileName\n\n.tar.gz 和 .tgz\n\n解压：tar zxvf FileName.tar.gz\n\n压缩：tar zcvf FileName.tar.gz DirName\n\n")])])]),t("p",[a._v("压缩多个文件：tar zcvf FileName.tar.gz DirName1"),t("br"),a._v("\nDirName2 DirName3 ...")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("\nbz2命令 　　解压1：bzip2 -d FileName.bz2\n\n解压2：bunzip2 FileName.bz2\n\n压缩： bzip2 -z FileName\n\n.tar.bz2\n\n解压：tar jxvf FileName.tar.bz2\n\n压缩：tar jcvf FileName.tar.bz2 DirName\n\nbz命令\n\n解压1：bzip2 -d FileName.bz\n\n解压2：bunzip2 FileName.bz\n\n压缩：未知\n\n.tar.bz\n\n解压：tar jxvf FileName.tar.bz\n\nZ命令 　　解压：uncompress FileName.Z\n\n压缩：compress FileName\n\n.tar.Z\n\n解压：tar Zxvf FileName.tar.Z\n\n压缩：tar Zcvf FileName.tar.Z DirName\n\nzip命令 　　解压：unzip FileName.zip\n\n压缩：zip -r FileName.zip DirName \n")])])]),t("h3",{attrs:{id:"_4-yum"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-yum"}},[a._v("#")]),a._v(" 4. yum")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("// 1 安装 \nyum install package  // 安装指定的安装包package \n\n// 2 更新和升级 \nyum update  // 全部更新 \nyum update package  // 更新指定程序包package\nyum check-update  // 检查可更新的程序 \nyum upgrade package  // 升级指定程序包package（会删除旧版本的package）\n\n// 3 查找和显示 \nyum info // 列出所有可以安装或更新的包的信息\nyum info package //显示安装包信息package \nyum list // 显示所有已经安装和可以安装的程序包 \nyum list package  // 显示指定程序包安装情况package\nyum search package // 搜索匹配特定字符的package的详细信息\n\n// 4 删除程序 \nyum remove | erase package  // 删除程序包package\nyum deplist package  // 查看程序package依赖情况\n\n// 5 清除缓存 \nyum clean packages  // 清除缓存目录下的软件包 \nyum clean headers // 清除缓存目录下的 headers \nyum clean oldheaders // 清除缓存目录下旧的 headers \nyum clean, yum clean all  // (= yum clean packages; yum clean oldheaders) 清除缓存目录下的软件包及旧的headers\n")])])]),t("h3",{attrs:{id:"_5-vim"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-vim"}},[a._v("#")]),a._v(" 5. vim")]),a._v(" "),t("h3",{attrs:{id:"重要文件地址"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#重要文件地址"}},[a._v("#")]),a._v(" 重要文件地址")]),a._v(" "),t("ul",[t("li",[a._v("~/.ssh\n"),t("ul",[t("li",[a._v("公钥，私钥")])])])])])}),[],!1,null,null,null);e.default=r.exports}}]);