(window.webpackJsonp=window.webpackJsonp||[]).push([[45],{416:function(_,l,v){"use strict";v.r(l);var e=v(44),n=Object(e.a)({},(function(){var _=this,l=_.$createElement,v=_._self._c||l;return v("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[v("h1",{attrs:{id:"面试-03-aibee"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#面试-03-aibee"}},[_._v("#")]),_._v(" 面试 03-Aibee")]),_._v(" "),v("ul",[v("li",[_._v("问题\n"),v("ol",[v("li",[_._v("关于ai技术，爱笔铺的很开，想计算机视觉，语音识别大数据分析，机器人等。商业落地的话选择的是 线下零售，线下旅游。这些AI技术表现在这两个落地的产品中是如何体现的。\n"),v("ul",[v("li",[_._v("当初选择这个切入点是有什么特殊的原因吗？我了解到线下零售应该是有很多大公司也在布局的。")])])]),_._v(" "),v("li",[_._v("方便说一下下一步的目标，或者落地方向是什么吗")]),_._v(" "),v("li",[_._v("AI平台可以稍微讲解一下吗，\n"),v("ul",[v("li",[_._v("现在到什么地步了，进展如何，大概有几个人")])])]),_._v(" "),v("li",[_._v("我本来还想再昨天晚上去官网再看看，但是一直进不去，所以就暂时是这些了")])])])]),_._v(" "),v("ol",[v("li",[_._v("Linux分段，分页。")]),_._v(" "),v("li",[_._v("Redis进程模型\n"),v("ul",[v("li",[_._v("单进程，单线程")])])]),_._v(" "),v("li",[_._v("Nginx进程模型\n"),v("ul",[v("li",[_._v("多进程，单线程")]),_._v(" "),v("li",[_._v("异步非阻塞：")])])]),_._v(" "),v("li",[_._v("MySQL索引为什么采用B+树这种宽树，而不是二叉树，\n"),v("ol",[v("li",[_._v("B树，B+树，B*树\n"),v("ol",[v("li",[_._v("B树")]),_._v(" "),v("li",[_._v("B+树\n"),v("ol",[v("li",[_._v("B+树的关键字全部存放在叶子节点中，非叶子节点用来做索引，而叶子节点中有一个指针指向一下个叶子节点。做这个优化的目的是为了提高区间访问的性能。而正是这个特性决定了B+树更适合用来存储外部数据")])])])])]),_._v(" "),v("li",[_._v("好处：\n"),v("ol",[v("li",[_._v("磁盘读写代价低。把节点分块，磁盘I/O变少")]),_._v(" "),v("li",[_._v("查询效率稳定")]),_._v(" "),v("li",[_._v("数据都存在叶子节点，方便扫库")])])])])]),_._v(" "),v("li",[_._v("ACID\n"),v("ol",[v("li",[_._v("原子性，一致性，隔离性，持久性")])])]),_._v(" "),v("li",[_._v("隔离级别\n"),v("ol",[v("li",[_._v("隔离级别           脏读（Dirty Read）          不可重复读（NonRepeatable Read）     幻读（Phantom Read）")]),_._v(" "),v("li",[_._v("读未提交（Read uncommitted）        1                         1                    1")]),_._v(" "),v("li",[_._v("读已提交（Read committed）            0                         1                     1")]),_._v(" "),v("li",[_._v("可重复读（Repeatable read）          0                         0                     1\n"),v("ul",[v("li",[_._v("避免脏读，不可重复读的发生")])])]),_._v(" "),v("li",[_._v("串行化（Serializable ）                    0                          0                     0")])])]),_._v(" "),v("li",[_._v("Python2中的库，Python3没有，如何解决。")]),_._v(" "),v("li",[_._v("避免GIL\n"),v("ol",[v("li",[_._v("使用python3.4或更高版本（对GIL机制进行了优化）")]),_._v(" "),v("li",[_._v("使用多进程替换多线程（多进程之间没有GIL，但是进程本身的资源消耗较多）")]),_._v(" "),v("li",[_._v("使用C编写高性能模块（with nogil跳出GIL限制）")]),_._v(" "),v("li",[_._v("使用Jython、IronPython等无GIL解释器")]),_._v(" "),v("li",[_._v("全IO密集型任务时使用多线程")]),_._v(" "),v("li",[_._v("使用协程（高效的单线程模式，也称微线程；通常与多进程配合使用）")])])]),_._v(" "),v("li",[_._v("Python2，3区别\n"),v("ul",[v("li",[_._v("print 函数")]),_._v(" "),v("li",[_._v("默认编码以及字符类型")]),_._v(" "),v("li",[_._v("除法运算\n"),v("ul",[v("li",[_._v("Python2")]),_._v(" "),v("li",[_._v("Python3")])])]),_._v(" "),v("li",[_._v("Python3去除了long类型")]),_._v(" "),v("li",[_._v("异常的形式")])])]),_._v(" "),v("li",[_._v("实现with语句，要实现那个魔方方法\n"),v("ul",[v("li",[_._v("实现__enter__和__exit__方法后，就能通过with语句进行上下文管理")])])]),_._v(" "),v("li",[_._v("单链表逆序")])]),_._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[_._v("\nclass ListNode:\n    def __init__(self,x):\n        self.val=x;\n        self.next=None;\n    \n'''\n递归操作，先将从第一个点开始翻转转换，从下一个节点开始翻转\n直至只剩一个节点\n时间消耗O(n),空间消耗O(1)\n'''\ndef reverse_linkedlist4(head):\n    if head is None or head.next is None:\n        return head\n    else:\n        newhead=reverse_linkedlist4(head.next)\n        head.next.next=head\n        head.next=None\n    return newhead\n\n")])])])])}),[],!1,null,null,null);l.default=n.exports}}]);