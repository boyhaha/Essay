(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{399:function(a,e,s){"use strict";s.r(e);var t=s(44),n=Object(t.a)({},(function(){var a=this,e=a.$createElement,s=a._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h1",{attrs:{id:"基础"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基础"}},[a._v("#")]),a._v(" 基础")]),a._v(" "),s("h2",{attrs:{id:"_0-数据库介绍"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_0-数据库介绍"}},[a._v("#")]),a._v(" 0.数据库介绍：")]),a._v(" "),s("ul",[s("li",[a._v("数据的存储位置：")]),a._v(" "),s("li",[a._v("内存：存取速度快，不能长期保存，容量小")]),a._v(" "),s("li",[a._v("外存储器：存取速度慢，能长期保存数据，容量大")]),a._v(" "),s("li",[a._v("外存储器的存储形式：文件存储，数据库存储")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("文件管理阶段（word，excel，音频，视频）\n    优点：数据可以长期保存\n         存储容量大\n         使用比较简单\n\n    缺点：数据冗余大，数据一致性差，完整性维持困难\n         查找修改不方便\n\n数据库管理阶段\n    优点：数据可以长期保存\n         存储容量大\n         数据组织结构好\n         冗余度小\n         容易扩充\n         方便程序自动处理\n         查找修改效率高\n\n    缺点：难度和专业度相对文件要求较高\n")])])]),s("ul",[s("li",[a._v("数据库的几个概念：")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("数据：能够输入到计算机并被识别和处理的信息集合\n数据库：是按照数据结构组织、存储和管理的仓库，是在数据库管理系统管理和控制下存放在一定介质上的数据集合\n数据库管理系统：管理数据库的软件，用于按照一定的方法建立，使用，维护数据库结构内容\n数据库系统：由数据库，数据库管理系统，开发工具等共同构成的一个集合概念\n")])])]),s("hr"),a._v(" "),s("h2",{attrs:{id:"_1-数据库分类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-数据库分类"}},[a._v("#")]),a._v(" 1.数据库分类：")]),a._v(" "),s("ul",[s("li",[a._v("关系型数据库")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("采用关系模型来组织数据库的结构的数据库, 如：\nOracle  DB2  SQLServer  MySql  等数据库\nSqLite(python提供标准化模块，小巧，多用于嵌入式设备)\n\n优点：容易理解\n     使用方便，通过sql语句操作，而sql语句是非常成熟的\n     易于维护，完整性好，数据一致性高\n     通用化程度高，使用SQL语句，技术成熟，可以进行外联操作\n\n缺点：无法很好满足高并发的需求，每次数据操作都需要执行sql语句，对sql进行解析，导致高并发下读写性能不足\n     针对海量数据的爆发，性能不足，因为关系型数据库每一步操作几乎都需要加锁\n     扩展型不足，当数据量达到一定程度的时候不方便扩展\n")])])]),s("ul",[s("li",[a._v("非关系型数据库（NoSQL ---\x3e not only sql）")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("优点：高并发下，读写能力强\n     支持分布式存储，易于拓展\n     弱化数据结构，让数据结构简单\n\n缺点：缺少join 等复杂的操作\n     通用性差\n     结构灵活也需要更灵活的操作，容易混乱，没有标准的语句\n")])])]),s("blockquote",[s("p",[a._v("面试要求：能够描述关系型数据库和非关系型数据库的优缺点")])]),a._v(" "),s("ul",[s("li",[a._v("Nosql适用情况")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("1、数据模型简单\n2、对数据一致性要求低\n3、对并发处理要求高\n4、对数据库扩展由需求\n5、可以比较方便的以键值方式映射数据值\n")])])]),s("ul",[s("li",[a._v("非关系型数据库分类")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("键值存储数据库\n    Redis， Oracle BDB， Tokyo\n\n文档型数据库（是键值型数据库的升级版）\n    MongoDB， CouchDB\n\n列存储数据库\n    HBase\n\n图形数据库\n")])])]),s("blockquote",[s("p",[a._v("要求：知道非关系型数据库分为哪几类，mongodb是哪类的")])]),a._v(" "),s("ul",[s("li",[a._v("MongoDB和关系型数据库的概念对比")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("mysql          mongodb        含义\ndatabase       database       数据库\ntable          collection     表 / 集合\nrow            document       行、记录 / 文档\ncolumn         field          列、字段 / 域\nindex          index          索引\nprimary key    primary key    主键\n\n在mongo中：数据库包含多个集合\n          集合包含多条文档\n          文档中标明域及域对应的值\n")])])]),s("hr"),a._v(" "),s("h2",{attrs:{id:"_2-mongodb"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-mongodb"}},[a._v("#")]),a._v(" 2.MongoDB")]),a._v(" "),s("ul",[s("li",[a._v("介绍：")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("1、分布式的Nosql\n2、由C++编写\n3、是文档型数据库，支持的数据格式松散，类似于字典（Bson）\n4、最类似于关系型数据库的非关系数据库，应用广泛\n")])])]),s("ul",[s("li",[a._v("特点：")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("1、高性能，易部署，存储方便\n2、支持的查询操作相对其他Nosql要丰富\n3、支持的Bson数据格式包含数据类型比较全面\n4、支持众多语言的编程接口（ruby、python、c++、c#、php）\n5、有很好的扩展性\n")])])]),s("hr"),a._v(" "),s("h2",{attrs:{id:"_3-mongodb-安装"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-mongodb-安装"}},[a._v("#")]),a._v(" 3.MongoDB 安装")]),a._v(" "),s("ul",[s("li",[a._v("Ubuntu 系统：")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("sudo apt-get install mysql-server   # mysql 安装\nsodo apt-get updata                 # 更新软件源\nsodo apt-get install mongodb        # 安装mongodb\n\n默认安装路径：/var/lib/mongodb\n")])])]),s("ul",[s("li",[a._v("手动安装(Linux)：")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("1、下载对应版本的mongodb包\n2、将压缩包放到某个目录下（/opt  或  /usr/local）\n3、解压压缩包：tar -xvf mongo-linux-x86......-3.4.10.tgz\n4、解压后将解压文件夹中的bin目录添加到环境变量，bin中是mongo的相关命令\n5、cd /ect       sudo vi rc.local\n    或        \n   cd /ect       sudo vi bash.bashrc\n\n   在 exit 0 前加入\n   PATH=$PATH:/绝对路径/bin\n   export PATH\n6、reboot 重启\n")])])]),s("ul",[s("li",[a._v("Mac 系统：（推荐使用 homebrew 安装）")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("brew install mongodb\n")])])]),s("ul",[s("li",[a._v("centos 7")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("# 安装\nhttps://docs.mongodb.com/manual/tutorial/install-mongodb-on-red-hat/\n\n# 卸载\n# 停止\nsudo service mongod stop\n# 移除MongoDB包\nsudo yum erase $(rpm -qa | grep mongodb-org)\n# 删除数据文件及日志文件\nsudo rm -r /var/log/mongodb\n")])])]),s("hr"),a._v(" "),s("h2",{attrs:{id:"_4-启动mongodb-服务"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-启动mongodb-服务"}},[a._v("#")]),a._v(" 4.启动mongodb 服务")]),a._v(" "),s("ul",[s("li",[a._v("Linux 系统")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("mongod --dbpath /XX/YY    指定数据库路径\n       --port 端口号       指定占用的端口（默认端口为 27017 端口）\n")])])]),s("ul",[s("li",[a._v("Mac 系统")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("brew services start mongodb    # 启动\nbrew services stop mongodb     # 停止\nbrew services restart mongodb  # 重启\n")])])]),s("ul",[s("li",[a._v("启动mongo shell")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("mongo    进入mongo shell 模式\nquit()   退出mongo shell\n")])])]),s("blockquote",[s("p",[a._v("注：mongo shell下支持JavaScript代码")])]),a._v(" "),s("ul",[s("li",[a._v("数据库的备份和恢复（在终端中输入）")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("备份：mongodump -h dbhost -d dbname -o dbdir\n实例：mongodump -h 127.0.0.1 -d stu -o python\n\n恢复：mongorestore -h 127.0.0.1:27017 -d dbname <path>\n实例：mongorestore -h 127.0.0.1:27017 -d student python/stu\n")])])]),s("ul",[s("li",[a._v("数据库的检测")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("mongostat\ninsert每秒插入次数 query查找 update更新 delete删除\n\nmongotop\n检测每个数据库的读写时长\n")])])]),s("hr"),a._v(" "),s("h2",{attrs:{id:"_5-库的管理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-库的管理"}},[a._v("#")]),a._v(" 5.库的管理")]),a._v(" "),s("ul",[s("li",[a._v("数据库的创建")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("use databasename\n\n实例：创建一个名字为stu的数据库\n> use stu\n")])])]),s("blockquote",[s("p",[a._v("use 并不会直接创建出数据库，当向数据库中插入数据时数据库才会被真正创建 , use 同时还有在多个数据库直接切换的功能")])]),a._v(" "),s("ul",[s("li",[a._v("查看数据库：")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("实例：显示当前系统中的数据库\n> show dbs\n")])])]),s("blockquote",[s("p",[a._v("db：是一个全局量，表示当前正在use的数据库。如果没有进行任何use操作，则表示test（系统自动创建）")])]),a._v(" "),s("ul",[s("li",[a._v("数据库命名规则")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("数据库的名字可以是满足以下条件的任意 utf-8 字符串\n    1、不能是空字符串\n    2、不能含有：空格(' ')  点('.')  '/'  '\\'  '\\0'\n    3、应全部小写\n    4、不要超过64字节\n    5、不要使用 admin local config 这三个名字（系统已经定义）\n")])])]),s("blockquote",[s("p",[a._v("admin：用来存储用户和权限的, local：不会被复制，只能用于本台服务器访问, config：分片处理的时候，保存分片信息")])]),a._v(" "),s("ul",[s("li",[a._v("删除数据库")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("实例：删除db所代表的数据库\n> db.dropDatabase()\n")])])]),s("hr"),a._v(" "),s("h2",{attrs:{id:"_6-集合的管理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-集合的管理"}},[a._v("#")]),a._v(" 6.集合的管理")]),a._v(" "),s("ul",[s("li",[a._v("创建集合1")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("db.createCollection('集合名称')\n\n实例：创建一个名字为class的空集合\n> use stu\n> db.createCollection('class')\n\n命名规则：\n    1、不能为空字符串\n    2、不能含有'\\0'\n    3、不能以'system.'开头。(是系统的保留集合前缀)\n    4、集合名称不要和保留字重名，不要包含'$'\n")])])]),s("ul",[s("li",[a._v("创建集合2:")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("当向一个集合中存入一条文档，则集合会被自动创建，这是更加常用的方法\ndb.collect_name.insert()\n\n实例：自动创建class 这个集合\n> db.class.insert({'name':'lucy', 'age':15, 'sex':'w'})\n")])])]),s("ul",[s("li",[a._v("查看当前"),s("code",[a._v("use")]),a._v("的数据库中的所有集合")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("> show collections/tables\n")])])]),s("ul",[s("li",[a._v("修改集合名称")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("db.collectionName.renameCollection(newName)\n\n实例：\n> db.class.renameCollection('class1')\n")])])]),s("ul",[s("li",[a._v("删除集合")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("db.collectionName.drop()\n\n实例：删除class1集合\n> db.class1.drop()\n")])])]),s("hr"),a._v(" "),s("h2",{attrs:{id:"_7-文档介绍"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-文档介绍"}},[a._v("#")]),a._v(" 7.文档介绍")]),a._v(" "),s("blockquote",[s("p",[a._v("集合中包含多个文档，集合实际就是文档的集合")])]),a._v(" "),s("ul",[s("li",[a._v("同一集合中文档的设计原则：")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("同一类文档应当集中存储，便于管理\n集合中可以使用不同格式的文档\n集合中集中存储格式类似的文档，可以提高访问效率\n")])])]),s("ul",[s("li",[a._v("文档中对键的要求")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("1、一般来说是 utf-8格式的字符串\n2、键中不能有'\\0'，不能是空字符\n3、通常不会用 . 和 $\n4、一般以_开头的键都是系统的保留键，所以尽量不用下划线开头\n")])])]),s("ul",[s("li",[a._v("文档中值的要求：")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("mongodb 中值是bson格式的数据是json格式进化版，支持的数据类型如下：\n字符串         utf-8 格式的字符串均为合法\n整型           32位整型\n布尔           真 假\n浮点型         存储小数\nArrays        列表或数组\nTimestamp     时间戳\nObject        内部文档\nNull          空值\nSymbol        同字符串，多用于存储特殊字符\nDate          日期时间\nObjectId      objectid字串\nBinary data   二进制数据\ncode          代码，js代码\nregex         正则表达式\n\nmongo 中每种数据类型对应一个整数\n")])])]),s("hr"),a._v(" "),s("h2",{attrs:{id:"_8-文档的增"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_8-文档的增"}},[a._v("#")]),a._v(" 8.文档的增")]),a._v(" "),s("ul",[s("li",[a._v("插入文档1")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("db.collectionName.insert()\n注意在插入文档的时候，键可以不加引号\n\n插入多条数据\ndb.collectionName.insert([{}, {}, {}, {}])\n\n实例：\n> db.city.insert([{中国:'北京'}, {美国:'华盛顿'}, {德国:'柏林'}])\n> db.city.find()\n> db.city.drop()\n")])])]),s("blockquote",[s("p",[a._v("如果插入时自己设置了_id那么系统则会使用设置的_id值，但是_id仍然为主键，不能重复")])]),a._v(" "),s("ul",[s("li",[a._v("插入文档2")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("db.collectionName.save()\n\n1、如果不加_id 进行插入效果同insert()\n2、如果加_id 进行操作，如果_id值不存在则正常插入，如果存在则修改原文档\n3、save() 不能同时插入多条数据\n")])])]),s("ul",[s("li",[a._v("关于null")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("表示给某个域赋值为null\ndb.class2.insert({name:'Levi', age:null, date:'2017-9-1'})\n\n表示某个域不存在的情况\ndb.class2.find({sex:null}, {_id:0})\n")])])]),s("ul",[s("li",[a._v("时间：")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("date 类型\n存储 ISODate('2018-02-27 11:45:36')\n\n获取当前时间: new Date()\n实例：插入数据包含当前时间\ndb.class2.insert({name:'Alex', age:13, date:new Date()})\n")])])]),s("ul",[s("li",[a._v("练习1:")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("1、创建一个名为stu 的数据库\n> use stu\n\n2、创建一个名为class 的集合，插入几条记录，域为：name，age，sex，weight，course\n> db.class.insert([\n    {'name':'lucy', 'age':15, 'sex':'w', weight:85, course:['English', 'Chinese', 'Math', 'music']},\n    {'name':'lisi', 'age':11, 'sex':'m', weight:48, course:['Chinese', 'Math', 'music']},\n    {'name':'wang', 'age':18, 'sex':'w', weight:100, course:['English', 'Chinese']},\n    {'name':'zhang', 'age':10, 'sex':'m', weight:60, course:['Chinese', 'Math']},\n    {'name':'ming', 'age':12, 'sex':'w', weight:79, course:['English', 'Chinese', 'music']}\n    ])\n\n3、修改集合名class 为class1\n> db.class.renameCollection('class1')\n")])])]),s("hr"),a._v(" "),s("h2",{attrs:{id:"_9-文档的查"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_9-文档的查"}},[a._v("#")]),a._v(" 9.文档的查")]),a._v(" "),s("ul",[s("li",[a._v("格式：")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("db.collectionName.find(query, {filed:0/1})\ndb.collectionName.findOne(query, {field:0/1})\n")])])]),s("ul",[s("li",[a._v("功能：")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("find 查找所有符合条件的文档，不加参数默认查找所有文档\nfindOne 查找第一条符合条件的文档\n")])])]),s("ul",[s("li",[a._v("参数：")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("query：表示查找条件。相当于mysql中的where语句\nfield声明：展示指定域，其中0表示不显示该域，1表示显示该域。相当于mysql 中select 和from 间的内容。\n")])])]),s("blockquote",[s("p",[a._v("两个参数均以{} 类似字典的方式传入, 如果是空字典, 则与不写一样")]),a._v(" "),s("p",[a._v("当设置某几个域值为1，则其他域值默认为0，如：db.class1.find({}, {name:1, age:1})。当设置某几个域值为0，则其他域值默认为1，_id 始终默认为1，如果不想显示_id 则需要手动设置为0。_id 设置为0时，其他的域可以设置为1；除_id 外其他的普通域0和1不能混合设置")])]),a._v(" "),s("ul",[s("li",[a._v("返回值：")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('返回查找到的结果\n\n实例：\n> db.class1.find({name:\'lucy\'})\n\n返回值：\n{ "_id" : ObjectId("5a911a5fcb8d853e775289b2"), "name" : "lucy", "age" : 15, "sex" : "w" }\n\n24个十六进制的数用于系统自动生成的_id的（key）:\n    前8位文档创建时间\n    6位 机器ID\n    4位 进程ID\n    6位 计数器\n实例：\n查找所有数据记录\n> db.class1.find() --\x3e select * from class1;\n\n查找第一条符合条件的记录\n> db.class1.findOne() --\x3e select * from class1 where limit=1;\n\n查找一个name为Lei的同学\n> db.class1.findOne({name:\'Lei\'}, {_id:0}) --\x3e select * from class1 where name=\'Lei\' limit = 1;\n')])])]),s("ul",[s("li",[a._v("使用集合定位方法查找：")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("> db.getCollection('collectionName').find() --\x3e db.collectionName.find()\n")])])]),s("hr"),a._v(" "),s("h3",{attrs:{id:"_1-比较运算符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-比较运算符"}},[a._v("#")]),a._v(" 1.比较运算符：")]),a._v(" "),s("blockquote",[s("p",[a._v("字符串也可以比较大小，按ascii码值逐个比较")])]),a._v(" "),s("ul",[s("li",[a._v("$eq 等于")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("实例：查找age等于18的同学\n> db.class1.find({age:{$eq:18}}, {_id:0}) --\x3e db.class1.find({age:18}, {_id:0})\n")])])]),s("ul",[s("li",[a._v("$lt 小于")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("实例：查找age小于18的同学\n> db.class1.find({age:{$lt:18}}, {_id:0})\n")])])]),s("ul",[s("li",[a._v("$lte 小于等于")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("实例：查找age小于等于18的同学\n> db.class1.find({age:{$lte:18}}, {_id:0})\n")])])]),s("ul",[s("li",[a._v("$gt 大于")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("实例：查找age大于17的同学\n> db.class1.find({age:{$gt:17}}, {_id:0})\n")])])]),s("ul",[s("li",[a._v("$gte 大于等于")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("实例：查找age大于等于17的同学\n> db.class1.find({age:{$gte:17}}, {_id:0})\n")])])]),s("ul",[s("li",[a._v("$ne 不等于")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("实例：查找age不于等于18的同学\n> db.class1.find({age:{$ne:18}}, {_id:0})\n")])])]),s("ul",[s("li",[a._v("$in 是否包含")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("实例：查找age包含10，11，17的同学\n> db.class1.find({age:{$in:[10, 11, 17]}}, \n{_id:0})\n")])])]),s("ul",[s("li",[a._v("$nin 是否不包含")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("实例：查找age不包含10，11，17的同学\n> db.class1.find({age:{$nin:[10, 11, 17]}}, \n{_id:0})\n")])])]),s("hr"),a._v(" "),s("h3",{attrs:{id:"_2-逻辑运算符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-逻辑运算符"}},[a._v("#")]),a._v(" 2.逻辑运算符")]),a._v(" "),s("ul",[s("li",[a._v("$and 逻辑与（逗号隔开的即为and关系）")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("实例：查找age等于17，name是wang的同学\n> db.class1.find({$and:[{age:17}, {name:'wang'}]}, {_id:0})\n\n更常用：\n> db.class1.find({age:17, name:'wang'}, {_id:0})\n查找age大于15，小于18的同学\n> db.class1.find({$and:[{age:{$gt:15}}, {age:{$lt:18}}]}, {_id:0})\n\n更常用：\n> db.class1.find({age:{$gt:15, $lt:18}}, {_id:0})\n")])])]),s("ul",[s("li",[a._v("$or 逻辑或")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("实例：查找age小于18或weight等于85的同学\n> db.class1.find({$or:[{age:{$lt:18}}, {weight:85}]}, {_id:0})\n")])])]),s("ul",[s("li",[a._v("$not 逻辑非")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("实例：用$not 查找age不小于18的同学\n> db.class1.find({age:{$not:{$lt:18}}}, {_id:0})\n")])])]),s("ul",[s("li",[a._v("$nor 既不也不")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("实例：查找age既不小于18也不要name为zhang的同学\n> db.class1.find({$nor:[{age:{$lt:18}}, {name:'zhang'}]}, {_id:0})\n")])])]),s("hr"),a._v(" "),s("h3",{attrs:{id:"_3-混合查找实例"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-混合查找实例"}},[a._v("#")]),a._v(" 3.混合查找实例")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("实例：name = 'Jame' and (age = 12 or age = 13)\n> db.class1.find({name:'Jame', $or:[{age:12}, {age:13}]}, {_id:0})\n\n\b实例：age > 13 or (name = 'wang' and sex = 'm')\n> db.class1.find({$or:[{age:{$gt:13}}, {name:'wang', sex:'m'}]})\n")])])]),s("hr"),a._v(" "),s("h3",{attrs:{id:"_4-数组查找-course的值是一个数组"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-数组查找-course的值是一个数组"}},[a._v("#")]),a._v(" 4.数组查找 (course的值是一个数组)")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("实例：筛选course 数组中包含'chinese' 的文档\n> db.class3.find({course:'Chinese'}, {_id:0})\n")])])]),s("ul",[s("li",[a._v("$all")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("实例：筛选course 数组中包含$all:{'', ''} 子集的文档\n> db.class3.find({course:{$all:['Chinese', 'English']}}, {_id:0})\n")])])]),s("ul",[s("li",[a._v("$size")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("实例：筛选course 数组中包含2 个元素的文档\n> db.class3.find({course:{$size:2}}, {_id:0})\n")])])]),s("hr"),a._v(" "),s("h3",{attrs:{id:"_5-数组显示-course的值是一个数组"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-数组显示-course的值是一个数组"}},[a._v("#")]),a._v(" 5.数组显示 (course的值是一个数组)")]),a._v(" "),s("ul",[s("li",[a._v("$slice 可以和0 或1 搭配")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("实例：显示数组中前两项\n> db.class3.find({}, {_id:0, course:{$slice:2}})\n\n实例：显示数组中跳过第一项 显示后面两项\n> db.class3.find({}, {_id:0, course:{$slice:[1, 2]}})\n")])])]),s("hr"),a._v(" "),s("h3",{attrs:{id:"_6-其他查找命令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-其他查找命令"}},[a._v("#")]),a._v(" 6.其他查找命令")]),a._v(" "),s("ul",[s("li",[a._v("$exits")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("实例：查找某个域存在与否的文档，true表示存在，false表示不存在\n> db.class1.find({weight:{$exists:true}}, {_id:0})\n")])])]),s("ul",[s("li",[a._v("$mod # 取模运算")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("实例：查找某个域的值，匹配给定的除数和余数\n> db.class1.find({age:{$mod:[3, 1]}}, {_id:0})\n")])])]),s("ul",[s("li",[a._v("$type")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("实例：查找某个域是指定类型的文档\n> db.class3.find({course:{$type:2}}, {_id:0})\n")])])]),s("h3",{attrs:{id:"_7-和查找结果相关的函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-和查找结果相关的函数"}},[a._v("#")]),a._v(" 7.和查找结果相关的函数")]),a._v(" "),s("ul",[s("li",[a._v("distinct(colName)")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("实例：查看class集合中所有文档age域包含哪些值\n> db.class1.distinct('age')\n")])])]),s("ul",[s("li",[a._v("pretty()")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("实例：格式化显示结果\n> db.class1.find().pretty()\n")])])]),s("ul",[s("li",[a._v("limit(num)")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("实例：显示查找结果的前num项\n> db.class1.find({}, {_id:0}).limit(3)\n")])])]),s("ul",[s("li",[a._v("skip(num)")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("实例：跳过前num条记录进行显示\n> db.class1.find({}, {_id:0}).skip(2)\n")])])]),s("ul",[s("li",[a._v("count()")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("实例：统计查询到的文档个数\n> db.class1.find({}, {_id:0}).count()\n")])])]),s("ul",[s("li",[a._v("sort({}, {}, {}, .......) :")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("实例：按照指定的域值进行排序（指定某个域的值如果是1表示升序、-1表示降序）\n> db.class1.find({}, {_id:0}).sort({age:1})\n")])])]),s("ul",[s("li",[s("p",[a._v("query")]),a._v(" "),s("blockquote",[s("p",[a._v("结果调用函数是可以连续调用的")])])])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("实例：查找年龄最小的三个文档\n> db.class1.find({}, {_id:0}).sort({age:1}).limit(3)\n")])])]),s("hr"),a._v(" "),s("h2",{attrs:{id:"_10-文档的改"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_10-文档的改"}},[a._v("#")]),a._v(" 10.文档的改")]),a._v(" "),s("ul",[s("li",[a._v("格式：")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("db.collectionName.update(query, update, upset, multi)\nupdate tablename set.... where....\n")])])]),s("ul",[s("li",[a._v("功能：更新文档数据")]),a._v(" "),s("li",[a._v("参数：")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("query  定位要更新的文档，相当于where用法同查找\nupdate 将数据更新为什么，相当于set，update需要配合修改器使用，如果不使用修改器，\b就是替换文本，而不是更新某个字段\n\nupset  是boolean值，默认为false，如果query存在修改，不存在则不做任何改变，如果设置为true，表示如果query的文档不存在则根据update插入一条新的文档，如果存在则修改\n\nmulti  是boolean值，默认为false，如果query匹配到多个，只修改第一个，如果设置为true，表示修改所有query的文档\n")])])]),s("h3",{attrs:{id:"_1-修改器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-修改器"}},[a._v("#")]),a._v(" 1.修改器：")]),a._v(" "),s("ul",[s("li",[a._v("$set：修改某一个或多个域的值，如果该域不存在则添加这个域")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("实例：将名为Han 的性别修改为女\n> db.class1.update({name:'Han'}, {$set:{sex:'w'}})\n")])])]),s("ul",[s("li",[a._v("$inc 将某个域的值，增加或者是减少")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("实例：所有年龄小于20 的人年龄加3\n> db.class1.update({age:{$lt:18}}, {$inc:{age:3}}, false, true)\n")])])]),s("ul",[s("li",[a._v("$mul 乘法修改器，将某个域的值乘以多少")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("实例：将第一个人的年龄乘以2\n> db.class1.update({}, {$mul:{age:2}})\n")])])]),s("ul",[s("li",[a._v("$unset 删除某一个或多个域，域后面加什么数字无所谓")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("实例：将第一个人的性别删除\ndb.class1.update({}, {$unset:{sex:1}})\n")])])]),s("ul",[s("li",[a._v("$rename 修改域名")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("实例：将所有存在sex域的文档的sex域名改为gender\ndb.class1.update({sex:{$exists:true}}, {$rename:{'sex':'gender'}}, false, true)\n")])])]),s("ul",[s("li",[a._v("$min 若匹配到的文档的指定域的值小于给定值则不做任何修改，如果大于给定的值则修改为给定值")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("实例：将所有age大于20的改为20\ndb.class1.update({}, {$min:{age:20}}, false, true)\n")])])]),s("ul",[s("li",[a._v("$max 若匹配到的文档指定域的值大于给出的值则不做修改，如果小于给出的值则改为指定值")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("实例：将所有age小于17的改为17\ndb.class1.update({}, {$max:{age:17}}, false, true)\n")])])]),s("hr"),a._v(" "),s("h3",{attrs:{id:"_2-数组修改器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-数组修改器"}},[a._v("#")]),a._v(" 2.数组修改器")]),a._v(" "),s("ul",[s("li",[a._v("$push 向数组中添加一项元素")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("实例：向数组course添加一个python\n> db.class3.update({name:'wang'}, {$inc:{age:1}, $push:{course:'python'}})\n")])])]),s("ul",[s("li",[a._v("$pushAll 向数组中添加多项元素")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("实例：向数组score添加\n> db.class3.update({name:'li'}, {$pushAll:{score:[100, 99]}})\n")])])]),s("p",[a._v("$each")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("> db.class3.update({name:'li'}, {$push:{score:{$each:[100, 99]}}})\n")])])]),s("ul",[s("li",[a._v("$pull 从数组中删除一项")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("实例：删除score数组中的78\n> db.class3.update({name:'li'}, {$pull:{score:88}})\n")])])]),s("ul",[s("li",[a._v("$pullAll 从数组中删除多项")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("db.class3.update({name:'li'}, {$pullAll:{score:[99, 100]}})\n")])])]),s("ul",[s("li",[a._v("$pop 从数组两侧弹出数据, 1 从右侧弹出， -1 从左侧弹出")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("db.class3.update({name:'li'}, {$pop:{score:1}})\n")])])]),s("ul",[s("li",[a._v("$addToSet 同push 但是不能有重复项")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('实例：用$addToSet更新可以避免重复，将它与$each组合起来，可以一次性添加多条（就算后添加的值已存在也没有关系）\n> db.user.update({"name":"li"},{"$addToSet":{"course":{"$each":["singing","dancing"]}}})\n')])])]),s("hr"),a._v(" "),s("h2",{attrs:{id:"_11-文档的删"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_11-文档的删"}},[a._v("#")]),a._v(" 11.文档的删")]),a._v(" "),s("ul",[s("li",[a._v("格式：")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("db.collectionName.remove(query, justOne)\n")])])]),s("ul",[s("li",[a._v("功能：删除文档")]),a._v(" "),s("li",[a._v("参数：")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("query：  定位要删除的记录，类似mysql中where，具体写法同查找\njustOne：赋一个布尔类型值，如果不写则表示删除所有符合query条件的文档，如果赋值为true或者1，表示只删除第一条符合query条件的文档\n实例：\n删除所有age 小于13 的文档\ndb.class1.remove({age:{$lt:13}})\n\n实例：\n删除第一条age 大于17 的文档\ndb.class1.remove({age:{$gt:17}}, true)\n\n删除第一条文档\ndb.collectionName.remove({}, 1)\n\n删除所有文档\ndb.collectionName.remove({})\n")])])]),s("hr"),a._v(" "),s("h2",{attrs:{id:"_12-练习"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_12-练习"}},[a._v("#")]),a._v(" 12.练习：")]),a._v(" "),s("p",[a._v("1.创建一个数据名库字为 grade")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("use grade\n")])])]),s("p",[a._v("2.数据库中创建集合名称为 class")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("db.createCollection('class')\n")])])]),s("p",[a._v("3.向集合插入文档，格式结构为：name age sex hobby[画画，唱歌，跳舞，篮球，足球]")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("\n")])])]),s("p",[a._v("4.查找练习")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("查看班级所有学生的信息\ndb.class.find({}, {_id:0})\n\n查看班级所有年龄为4 岁的学生信息\ndb.class.find({age:4}, {_id:0})\n\n查看班级所有年龄大于4 岁的学生\ndb.class.find({age:{$gt:4}}, {_id:0})\n\n查看班级所有年龄4-7 岁之间的学生\ndb.class.find({age:{$gte:4, $lte:7}}, {_id:0})\n\n查看所有年龄大于4 岁的女同学\ndb.class.find({age:{$gt:4}, sex:'g'}, {_id:0})\n\n查看所有小于4 岁或者大于7岁的学生\ndb.class.find({$or:[{age:{$lt:4}}, {age:{$gt:7}}]}, {_id:0})\n\n查看年龄是4 岁或者6岁的学生\ndb.class.find({age:{$in:[4, 6]}}, {_id:0})\n\n查看有两项爱好的学生\ndb.class.find({hobby:{$size:2}}, {_id:0})\n\n查看喜欢画画的学生\ndb.class.find({hobby:'画画'}, {_id:0})\n\n查看既喜欢画画有喜欢跳舞的学生\ndb.class.find({hobby:{$all:['画画', '跳舞']}}, {_id:0})\n\n统计有三项爱好的学生人数\ndb.class.find({hobby:{$size:3}}, {_id:0}).count()\n\n查看本班第二位学生信息\ndb.class.find({}, {_id:0}).skip(1).limit(1)\n\n将学生按年龄升序，年龄相同按姓名升序排序\ndb.class.find({}, {_id:0}).sort({age:1, name:1})\n\n统计学生兴趣都覆盖哪些范围\ndb.class.distinct('hobby')\n\n删除所有年龄小于4和大于9的学生\ndb.remove({$or:[{age:{$lt:4}}, {age:{$gt:9}}]}, {_id=0})\n")])])]),s("hr"),a._v(" "),s("h2",{attrs:{id:"_13-内部文档操作"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_13-内部文档操作"}},[a._v("#")]),a._v(" 13.内部文档操作")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("在文档中，某个域的值也是文档，把这个文档称为内部文档\n\ndb.class2.insert({book:{'title':'python黑客编程从入门到入狱', 'prince':45.8}})\ndb.class2.find({'book.title':'python黑客编程从入门到入狱'})\n使用外层文档的域 点 的方法引用内部文档域的值时，必须加引号\ndb.class2.update({book:{$exists:true}}, {$set:{'book.prince':99}})\n")])])]),s("p",[a._v("通过数组域名应用索引序号的方式，修改查找数组中具体某一项 实例：查找course第一项是Chinese的 db.class3.find({'course.0':'Chinese'},{_id:0})")]),a._v(" "),s("p",[a._v("修改name=li 的文档score数组中的一个数为76 db.class3.update({name:'li'}, {$set:{'score.0':76}})")]),a._v(" "),s("ul",[s("li",[a._v("引深：")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("db.class2.insert({name:'book message', book:[{title:'Python入门', price:46}, {title:'Html入门', price:47}, {title:'Java入门', price:48}]})\n\n查询1: 数组包含项查询\ndb.class2.find({book:{title:'Python入门', price:46}}, {_id:0}).pretty()\n\n查询2:\ndb.class2.find({'book.title':'Python入门', 'book.price':46}, {_id:0}).pretty()\n\n查询3：出现问题\ndb.class2.find({'book.title':'Python入门', 'book.price':47}, {_id:0}).pretty()\n")])])]),s("ul",[s("li",[a._v("$elemMatch 操作符解决上面的问题, 专门用于查询数组中的元素是否满足指定条件:")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("db.class2.find({book:{$elemMatch:{title:'Python入门', price:47}}}).pretty()\n")])])]),s("hr"),a._v(" "),s("h2",{attrs:{id:"_14-练习-接上练习文档grade"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_14-练习-接上练习文档grade"}},[a._v("#")]),a._v(" 14.练习：接上练习文档grade")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("1、将该班上名为小红的同学年龄变为8岁，兴趣爱好变为跳舞、画画\n2、追加小明的兴趣爱好：唱歌\n3、增加小王爱好：吹牛和打篮球\n4、增加小李爱好：吹牛、唱歌，要保证不要和以前的重复\n5、给该班所有同学都增加1岁\n6、删除小明sex属性\n7、删除小明爱好中的第一项\n8、删除小红爱好中的画画\n")])])]),s("hr"),a._v(" "),s("h2",{attrs:{id:"_15-索引"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_15-索引"}},[a._v("#")]),a._v(" 15.索引：")]),a._v(" "),s("blockquote",[s("p",[a._v("指的是建立指定键值所在文档中存储闻之的对应关系清单。使用索引进行查找可以方便快速查找，减少遍历，提高效率。如果不使用索引，往往进行大量扫描，效率低")])]),a._v(" "),s("ul",[s("li",[a._v("创建索引：(过去的方法：createIndex()）")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("db.collection.createIndex()\n\n实例：以name域创建索引\ndb.class1.createIndex({'name':1})  1 表示正向索引， -1 表示逆向索引\n")])])]),s("ul",[s("li",[a._v("可选参数:\n"),s("ul",[s("li",[a._v("background: 后台创建\n"),s("ul",[s("li",[a._v('{"background": true}')])])]),a._v(" "),s("li",[a._v("unique: 是否唯一索引")]),a._v(" "),s("li",[a._v("name: 索引名")]),a._v(" "),s("li",[a._v("expireAfterSeconds: 集合的生存时间, 秒为单位")])])])]),a._v(" "),s("ul",[s("li",[a._v("查看当前集合中的索引")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("db.class1.getIndexes()\n")])])]),s("ul",[s("li",[a._v("查看当前数据库所有索引")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("db.system.indexes.find()\n")])])]),s("ul",[s("li",[a._v("创建复合索引")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("实例：同时为两个域创建索引\ndb.class1.createIndex({'name':1, 'age': -1})\n")])])]),s("ul",[s("li",[a._v("设置过期时间:")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('expireAfterSeconds: 秒\ndb.test_timer.createIndex({"timer":1}, {expireAfterSeconds: 10})\n')])])]),s("ul",[s("li",[a._v("删除索引")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("db.class1.dropIndex(name:1)\n")])])]),s("ul",[s("li",[a._v("删除复合索引")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("db.class1.dropIndex({name:1, age:-1})\n")])])]),s("ul",[s("li",[a._v("删除全部索引")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("db.class1.dropIndexes()\n不会删除 _id 索引\n")])])]),s("ul",[s("li",[a._v("查看索引大小")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("db.col.totalIndexSize()\n")])])]),s("ul",[s("li",[a._v("重建索引")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("db.col.reIndex()\n")])])]),s("p",[a._v("其他索引 数组索引：如果对某个域创建索引，这个域的值为数组，那么会对数组的值也会创建索引，提高数组中值的查找效率 db.class3.find('bobby':'足球')")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("子文档索引：如果某个域的值时文档，那么可以单独对这个子文档中的域创建索引\ndb.class2.createIndex({'book.title':1})\n\n唯一索引：如果希望索引拥有不重复的值可以通过创建唯一索引来约束对应的值\ndb.class1.createIndex({age:1}, {'unique':true})\n\n覆盖索引：查找时不获取具体文档，仅从索引中就可以获取到全部要查询的数据\n         具体使用：查询时，限定返回的数据仅包含索引数据\n\n稀疏索引：只针对存在指定域的文档建立索引表，跳过不存在指定域的文档，使索引表更小巧，提高效率\ndb.class2.createIndex({age:1}, {sparse:true})\n\n文本索引：使用文本索引可以较快速的进行文本检索，文本索引可以建立在任意格式的字符串上\n实例：给python这个域创建索引\ndb.class2.createIndex({python:'text', description:'text'})\n查找python域中的字符串，如果包含search的内容则查找出来\ndb.class2.find({$text:{$search:'python html css'}})\n* search 后的字符串以空格分割为多个部分，只要查找到其中一部分就会返回相应的文档\n* 如果查找的字符串中本身包含空格，则需要用引号作为一个整体饮用，此时内部引号需要转译字符\ndb.class2.find({$text:{$search:\"\\\"learn java\\\"\"}})\n\n不包含Linux 包含learn\ndb.class2.find({$text:{$search:'learn -Linux'}})\n\n删除文本索引\n1、使用getIndexes() 查看索引名称\n2、dropIndex() 按照索引名称\n根据名称删除索引\n")])])]),s("p",[a._v("索引约束： 1、影响插入删除修改操作的效率，当数据发生修改时，不仅需要更新文档，还需要更新索引 2、占用了一定的存储空间 综上：当数据库较小，或者数据需要频繁的修改而不是查询的时候不宜创建索引")]),a._v(" "),s("p",[a._v("固定集合 mongo中固定集合指的是性能出色且有着固定大小的集合 作用：处理日志， 处理暂存， 做临时缓存区 特点：插入数据快，顺序查询速度快，能够及时淘汰早期数据")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("创建\ndb.createCollection('collectionName', {capped:true, size:10000, max:10000})\n参数：capped：true 表示固定集合\n     size： 空间大小 单位 KB\n     max：  可以存放文档的个数上限\n\n检查一个集合是否是固定集合\ndb.log.isCapped()\n")])])]),s("p",[a._v("聚合：用于对文档查找结果的统计或者加工 统计一个集合中文档数量 db.class1.count()")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("聚合函数配合聚合标识符来使用\ndb.collectionName.aggregate()\n\n统计方法：\n$sum: 求和\n$avg: 求平均数\n$min: 最小值\n$max: 最大值\n$first: 获取第一个值\n$last:  获取最后一个值\n\n聚合标识符\n1、$group 分组\n{$group:{_id:'$name', num:{$sum:1}}}\n  分组     按照姓名     统计结果名称\n\n统计每一个姓名人数\ndb.class4.aggregate({$group:{_id:'$name', num:{$sum:1}}})\n\n统计每一个姓名的年龄之和\ndb.class4.aggregate({$group:{_id:'$name', num:{$sum:'$age'}}})\n\n统计每个名字人的平均年龄\ndb.class4.aggregate({$group:{_id:'$name', avg:{$avg:'$age'}}})\n\n可以同时统计多项内容\ndb.class4.aggregate({$group:{_id:'$name', num:{$sum:'$age'}, avg:{$avg:'$age'}}})\n\n统计同名中年龄最大的\ndb.class4.aggregate({$group:{_id:'$name', max:{$max:'$age'}}})\n\n统计每个性别中的第一个人\ndb.class4.aggregate({$group:{_id:'$sex', name:{$first:'$name'}}})\n\n2、$project: 用于修改文档显示结构\ndb.class4.aggregate({$project:{_id:0, name:1, age:1, sex:1}})\n\n更灵活的增加显示内容\ndb.class4.aggregate({$project:{_id:0, name:1, age:1, realName:'$name'}})\n\n3、$match： 过滤\ndb.class4.aggregate({$match:{'age':{$gt:13}}})\n\n4、$limit：取多少条数据\ndb.class4.aggregate({$limit:3})\n\n5、$skip：跳过多少条数据\ndb.class4.aggregate({$skip:3})\n\n6、$sort：排序\ndb.class4.aggregate({$sort:{age:1}})\n")])])]),s("p",[a._v("聚合管道：将前一个聚合的结果传给后一个聚合操作继续执行 统计年龄大于13 的男女人数 db.class4.aggregate([{$match:{age:{$gt:13}}}, {$group:{_id:'$sex', num:{$sum:1}}}])")]),a._v(" "),s("p",[a._v("GridFS：mongo提供的文件存储方式 当文件大小大于16M的时候可以使用这种方式进行存储 将文件存储在mongo的集合中，通过两个集合共同确定该文件的存储")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("fs.files: 存储和文件有关的内容信息，比如filename，文件类型content_type等\nfs.chunks:实际存储文件的内容，以二进制方式分块存储，将文件分割为多个小块，每块作为chunks集合中的文档进行存储\n\nmongofiles -d dbName put fileName\n* db.Name :要存储的数据库，如果不存在自动创建\n* fileName:要存储的文件名\n\n查看文件信息：\ndb.fs.files.find({}, {_id:0}).pretty()\n\n查看文件：\ndb.fs.chunks.find({files_id:Object()})\n\n优缺点：\n优点：1、存储方便\n     2、文件没有个数限制，方便管理\n缺点：读写效率低，中能整体替换不能部分更新\n")])])]),s("p",[a._v("游标： * 防止网络拥塞，造成数据传输慢 * 避免客户端 var cursor = db.student.find() cursor.hasNext() 查看是否有下一项 cursor.next() 获取下一项")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("实例：js创建游标\nvar cursor = db.class1.find()\n")])])]),s("hr"),a._v(" "),s("p",[a._v("python 的mongodb接口模块")]),a._v(" "),s("ul",[s("li",[a._v("安装：")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("sudo pip3 install pymongo\n")])])]),s("ul",[s("li",[a._v("插入操作")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("insert()\ninsert_many()\ninsert_one()\nsave()\n")])])]),s("ul",[s("li",[a._v("查找操作")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("find()\nfind_one()\n")])])]),s("blockquote",[s("p",[a._v("注意游标操作变动，会对后续游标的使用产生一定的影响")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("cursor = my_set.find()\nprint(cursor.count())\nprint(cursor.next())  # 会影响排序操作\nfor i in my_set.find().sort([('age', 1)]):  # 不能用游标，去掉上一句 next 才可以\n    print(i['name'], ':', i['age'])\n\nfor i in cursor.skip(3).limit(3):\n    print(i['name'], ':', i['age'])\n")])])]),s("blockquote",[s("p",[a._v("同样支持 $and $or $not $nor $gt $gte $lt $lte $ne $nin $eq $in")])]),a._v(" "),s("hr"),a._v(" "),s("p",[a._v("rs.slaveOk();")])])}),[],!1,null,null,null);e.default=n.exports}}]);