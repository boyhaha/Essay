(window.webpackJsonp=window.webpackJsonp||[]).push([[87],{465:function(v,_,l){"use strict";l.r(_);var i=l(44),n=Object(i.a)({},(function(){var v=this,_=v.$createElement,l=v._self._c||_;return l("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[l("h3",{attrs:{id:"引言"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#引言"}},[v._v("#")]),v._v(" 引言")]),v._v(" "),l("ul",[l("li",[v._v("短小精悍")]),v._v(" "),l("li",[v._v("语音特性")]),v._v(" "),l("li",[v._v("没有类和继承的概念,通过接口(interface) 来实现多态性")]),v._v(" "),l("li",[v._v("静态,强类型")]),v._v(" "),l("li",[v._v("支持交叉编译,完全支持 UTF-8")]),v._v(" "),l("li",[v._v("提供了海量的并行支持")]),v._v(" "),l("li",[v._v("不适合用来开发对实时性要求很高的软件\n"),l("ul",[l("li",[v._v("因为垃圾回收和自动内存分配")])])]),v._v(" "),l("li",[v._v("是一门类型安全和内存安全的编程语言(虽然 Go 语言中仍有指针的存在，但并不允许进行指针运算)")])]),v._v(" "),l("h3",{attrs:{id:"格式化代码"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#格式化代码"}},[v._v("#")]),v._v(" 格式化代码")]),v._v(" "),l("ul",[l("li",[l("p",[v._v("gofmt")])]),v._v(" "),l("li",[l("p",[v._v("格式化该源文件,并覆盖原始内容")]),v._v(" "),l("ul",[l("li",[v._v("gofmt –w program.go")]),v._v(" "),l("li",[v._v("如果不加 -w 则只会打印格式化后的结果而不重写文件")])])]),v._v(" "),l("li",[l("p",[v._v("格式化并重写所有go源文件")]),v._v(" "),l("ul",[l("li",[v._v("gofmt -w *.go")])])]),v._v(" "),l("li",[l("p",[v._v("格式化并重写map1目录及其子目录下的所有Go源文件")]),v._v(" "),l("ul",[l("li",[v._v("gofmt map1")])])]),v._v(" "),l("li",[l("p",[v._v("简单的代码重构(替换)")]),v._v(" "),l("ul",[l("li",[v._v("```go # 去掉多余的括号 gofmt -r '(a) -> a' –w *.go")])]),v._v(" "),l("p",[v._v("# 将源文件中多余的 len(a)去掉 gofmt -r 'a[n:len(a)] -> a[n:]' –w *.go ```")])])]),v._v(" "),l("h3",{attrs:{id:"生成代码文档"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#生成代码文档"}},[v._v("#")]),v._v(" 生成代码文档")]),v._v(" "),l("ul",[l("li",[v._v("go doc")]),v._v(" "),l("li",[v._v("一般用法")]),v._v(" "),l("li",[l("code",[v._v("go doc package")]),v._v(" 获取包的文档注释，例如："),l("code",[v._v("go doc fmt")]),v._v(" 会显示使用 "),l("code",[v._v("godoc")]),v._v(" 生成的 "),l("code",[v._v("fmt")]),v._v(" 包的文档注释。")]),v._v(" "),l("li",[l("code",[v._v("go doc package/subpackage")]),v._v(" 获取子包的文档注释，例如："),l("code",[v._v("go doc container/list")]),v._v("。")]),v._v(" "),l("li",[l("code",[v._v("go doc package function")]),v._v(" 获取某个函数在某个包中的文档注释，例如："),l("code",[v._v("go doc fmt Printf")]),v._v(" 会显示有关 "),l("code",[v._v("fmt.Printf()")]),v._v(" 的使用说明。")])]),v._v(" "),l("h3",{attrs:{id:"其他工具"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#其他工具"}},[v._v("#")]),v._v(" 其他工具")]),v._v(" "),l("ul",[l("li",[v._v("go install\n"),l("ul",[l("li",[v._v("安装go包的工具")])])]),v._v(" "),l("li",[v._v("go fix\n"),l("ul",[l("li",[v._v("将你的Go代码从旧的发行版迁移到最新的发行版")])])]),v._v(" "),l("li",[v._v("go test\n"),l("ul",[l("li",[v._v("轻量级单元测试框架")])])])]),v._v(" "),l("h3",{attrs:{id:"基本结构和要素"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#基本结构和要素"}},[v._v("#")]),v._v(" 基本结构和要素")]),v._v(" "),l("ul",[l("li",[l("p",[v._v("可见性规则")])]),v._v(" "),l("li",[l("p",[v._v("标识符 以大写字母(任何Unicode编码)开头 ——> public")])]),v._v(" "),l("li",[l("p",[v._v("标识符 以小写字母开头 ——> private")])]),v._v(" "),l("li",[l("p",[v._v("包的别名")])]),v._v(" "),l("li",[l("p",[v._v("```go package main")]),v._v(" "),l("p",[v._v('import fm "fmt" // alias3')]),v._v(" "),l("p",[v._v('func main() { fm.Println("hello, world") } ```')])]),v._v(" "),l("li",[l("p",[v._v("函数")])]),v._v(" "),l("li",[l("p",[l("code",[v._v("go func functionName(parameter_list) (return_value_list) { … }")])]),v._v(" "),l("ul",[l("li",[l("p",[v._v("parameter_list 的形式为 (param1 type1, param2 type2, …)")])]),v._v(" "),l("li",[l("p",[v._v("return_value_list 的形式为 (ret1 type1, ret2 type2, …)")])]),v._v(" "),l("li",[l("p",[v._v("main 函数是一个可执行程序必须包含的, 一般来说是启动后第一个执行的函数(如果有init() 函数则会先执行该函数). 它没有参数,也没有返回类型")])]),v._v(" "),l("li",[l("p",[v._v("程序正常退出的代码为0, 因异常退出返回非零值")])])])]),v._v(" "),l("li",[l("p",[v._v("类型")])]),v._v(" "),l("li",[l("p",[v._v("基本类型:")]),v._v(" "),l("ul",[l("li",[v._v("int、float、bool、string")])])]),v._v(" "),l("li",[l("p",[v._v("结构化:")]),v._v(" "),l("ul",[l("li",[v._v("struct、array、slice、map、channel")])])]),v._v(" "),l("li",[l("p",[v._v("只描述行为")]),v._v(" "),l("ul",[l("li",[v._v("interface")])])]),v._v(" "),l("li",[l("p",[v._v("类型转换")])]),v._v(" "),l("li",[l("p",[v._v("不支持隐式转换, 必须显式说明")])]),v._v(" "),l("li",[l("p",[v._v("常量")]),v._v(" "),l("ul",[l("li",[v._v("const")]),v._v(" "),l("li",[v._v("只能是基本类型")]),v._v(" "),l("li",[v._v("iota: 自增长")])])]),v._v(" "),l("li",[l("p",[v._v("变量")]),v._v(" "),l("ul",[l("li",[v._v("var")]),v._v(" "),l("li",[v._v("```go // var identifier type var a int var ( b bool str string )\n// var identifier [type] = value var a int = 15\na := 1 ```")]),v._v(" "),l("li",[v._v("声明后会自动赋予它该类型的零值")]),v._v(" "),l("li",[v._v("命名规则遵循驼峰命名法(public 需要首字母大写)")]),v._v(" "),l("li",[v._v("如果局部变量和全局变量同名, 全局变量会暂时隐藏")]),v._v(" "),l("li",[v._v("值类型和引用类型")]),v._v(" "),l("li",[v._v("值类型\n"),l("ul",[l("li",[v._v("int、float、bool 和 string 这些基本类型都属于值类型; 数组, 结构这些复合类型也是值类型")]),v._v(" "),l("li",[v._v("= 是将内存中的值进行了拷贝")]),v._v(" "),l("li",[v._v("值类型的变量的值存储在栈中")])])]),v._v(" "),l("li",[v._v("引用类型\n"),l("ul",[l("li",[v._v("指针(内存地址), slices, maps, channel")]),v._v(" "),l("li",[v._v("同一个引用类型的指针指向的多个字可以是在连续的内存地址中（内存布局是连续的），这也是计算效率最高的一种存储形式；也可以将这些字分散存放在内存中，每个字都指示了下一个字所在的内存地址")]),v._v(" "),l("li",[v._v("被引用的变量存储在堆中, 以便进行垃圾回收,且比栈拥有更大的内存空间")])])])])]),v._v(" "),l("li",[l("p",[v._v("打印")]),v._v(" "),l("ul",[l("li",[l("p",[v._v("Printf, Println")])]),v._v(" "),l("li",[l("p",[v._v("Sprintf, 与Printf作用相同,只是会将格式化后的字符串返回")])])])]),v._v(" "),l("li",[l("p",[v._v("简短形式, 使用:=赋值")]),v._v(" "),l("ul",[l("li",[v._v("只能用在函数体内, 不能用于全局变量的声明与赋值")])])]),v._v(" "),l("li",[l("p",[v._v("init 函数")]),v._v(" "),l("ul",[l("li",[v._v("变量除了在全局声明中初始化,也可以在init函数中初始化")]),v._v(" "),l("li",[v._v("不能被人为调用, 执行优先级大于main")]),v._v(" "),l("li",[v._v("每个源文件都只能包含一个 init 函数。初始化总是以单线程执行，并且按照包的依赖关系顺序执行")]),v._v(" "),l("li",[v._v("开始执行程序前对数据进行检验或修复, 以保障程序状态的正确性")])])])]),v._v(" "),l("h3",{attrs:{id:"基本类型和运算符"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#基本类型和运算符"}},[v._v("#")]),v._v(" 基本类型和运算符")]),v._v(" "),l("ul",[l("li",[v._v("基本类型")]),v._v(" "),l("li",[v._v("bool")]),v._v(" "),l("li",[v._v("数字类型\n"),l("ul",[l("li",[v._v("int,\n"),l("ul",[l("li",[v._v("int")]),v._v(" "),l("li",[v._v("int8（-128 -> 127）, int16（-32768 -> 32767）, int32（-2,147,483,648 -> 2,147,483,647）, int64（-9,223,372,036,854,775,808 -> 9,223,372,036,854,775,807）")]),v._v(" "),l("li",[v._v("uint8（0 -> 255）, uint16（0 -> 65,535）, uint32（0 -> 4,294,967,295）, uint64（0 -> 18,446,744,073,709,551,615）")])])]),v._v(" "),l("li",[v._v("float32(小数点后7位), float64(小数点后15位),")]),v._v(" "),l("li",[v._v("complex64 (32 位实数和虚数), complex128 (64 位实数和虚数)")]),v._v(" "),l("li",[v._v("也支持基于架构的类型")]),v._v(" "),l("li",[v._v("尽可能使用float64, math包中关于数学运算的函数都会要去接受这个类型")]),v._v(" "),l("li",[v._v("进制")]),v._v(" "),l("li",[v._v("增加前缀0 表示8进制")]),v._v(" "),l("li",[v._v("增加前缀0x表示16进制")]),v._v(" "),l("li",[v._v("复数\n"),l("ul",[l("li",[v._v("re+imI")]),v._v(" "),l("li",[v._v("函数 "),l("code",[v._v("real(c)")]),v._v(" 和 "),l("code",[v._v("imag(c)")]),v._v(" 可以分别获得相应的实数和虚数部分")]),v._v(" "),l("li",[v._v("推荐使用complex128")])])])])]),v._v(" "),l("li",[v._v("运算符\n"),l("ul",[l("li",[v._v("&&(和) 和 ||(或) 是具有快捷性质的运算符")])])]),v._v(" "),l("li",[v._v("位运算\n"),l("ul",[l("li",[v._v("只能用于整数类型的变量,且需要等长位模式")]),v._v(" "),l("li",[v._v("二元运算符\n"),l("ul",[l("li",[v._v("&(与), |(或), ^(异或)\n"),l("ul",[l("li",[v._v("位清除 &^：将指定位置上的值设置为 0。")])])])])]),v._v(" "),l("li",[v._v("一元运算符\n"),l("ul",[l("li",[v._v("按位补足, 左移, 右移")])])])])]),v._v(" "),l("li",[v._v("逻辑运算符\n"),l("ul",[l("li",[v._v("==, !=, <, <=, >, >=,")])])]),v._v(" "),l("li",[v._v("算术运算符\n"),l("ul",[l("li",[l("code",[v._v("/")]),v._v(" 对于整数运算而言，结果依旧为整数")]),v._v(" "),l("li",[v._v("取余运算符(%)只能作用于整数")]),v._v(" "),l("li",[v._v("浮点数除以 0.0 会返回一个无穷尽的结果，使用 +Inf 表示")]),v._v(" "),l("li",[v._v("++ — 只能作为语句, 而非表达式")]),v._v(" "),l("li",[v._v("溢出将会 抛弃超出位数")])])]),v._v(" "),l("li",[v._v("随机数\n"),l("ul",[l("li",[v._v("rand")])])]),v._v(" "),l("li",[v._v("字符类型")]),v._v(" "),l("li",[v._v("格式化说明符:\n"),l("ul",[l("li",[v._v("%d: 格式化整数\n"),l("ul",[l("li",[v._v("%0nd: 用于规定输出长度为n的整数")])])]),v._v(" "),l("li",[v._v("%x和%X: 格式化16进制表示的数字")]),v._v(" "),l("li",[v._v("%g: 格式化浮点型\n"),l("ul",[l("li",[v._v("%n.mg: 用于表示数字 n 并精确到小数点后 m 位, (g也可以使用f/e 代替)")]),v._v(" "),l("li",[v._v("%f: 输出浮点数")]),v._v(" "),l("li",[v._v("%e: 输出科学计数表示法")])])]),v._v(" "),l("li",[v._v("%c: 格式化字符")]),v._v(" "),l("li",[v._v("%t: bool")]),v._v(" "),l("li",[v._v("%T: a Go-syntax representation of the type of the value")]),v._v(" "),l("li",[v._v("%p: channel, pointer")]),v._v(" "),l("li",[v._v("%v %v the value in a default format\n"),l("ul",[l("li",[v._v("when printing structs, the plus flag (%+v) adds field names")]),v._v(" "),l("li",[v._v("%#v a Go-syntax representation of the value")]),v._v(" "),l("li",[v._v("可以用来表示复数，但当你希望只表示其中的一个部分的时候需要使用 %f")])])]),v._v(" "),l("li")])]),v._v(" "),l("li",[v._v("优先级")]),v._v(" "),l("li",[v._v("类型别名\n"),l("ul",[l("li",[v._v("使用某个类型时,可以起一个别名, 不过重命名的类型不包含原类型所包含的方法")])])]),v._v(" "),l("li",[v._v("字符串\n"),l("ul",[l("li",[v._v("字符串是 UTF-8 字符的一个序列")]),v._v(" "),l("li",[v._v("解释字符串: 使用双引号括起来")]),v._v(" "),l("li",[v._v("非解释字符串: 使用反引号括起来, 支持换行")]),v._v(" "),l("li",[v._v("字符串拼接\n"),l("ul",[l("li",[v._v('"a" + "b"')]),v._v(" "),l("li",[v._v("strings.Join(), bytes.Buffer(更高效)")])])]),v._v(" "),l("li",[v._v("strings\n"),l("ul",[l("li",[v._v("前缀, 后缀\n"),l("ul",[l("li",[v._v("s是否以prefix开头: strings.HasPrefix(s, prefix string) bool")]),v._v(" "),l("li",[v._v("s是否以结尾: strings.HasSuffix(s, suffix string) bool")])])]),v._v(" "),l("li",[v._v("包含关系: strings.Contains(s, substr string) bool")]),v._v(" "),l("li",[v._v("出现位置\n"),l("ul",[l("li",[v._v("strings.Index(s, str string) int\n"),l("ul",[l("li",[v._v("Index 返回字符串 str 在字符串 s 中的索引（str 的第一个字符的索引），-1 表示字符串 s 不包含字符串 str")])])]),v._v(" "),l("li",[v._v("strings.LastIndex(s, str string) int\n"),l("ul",[l("li",[v._v("最后出现位置的索引（str 的第一个字符的索引），-1 表示字符串 s 不包含字符串 str")])])]),v._v(" "),l("li",[v._v("strings.IndexRune(s string, r rune) int\n"),l("ul",[l("li",[v._v("查询非ASCII编码字符")])])])])]),v._v(" "),l("li",[v._v("字符串替换\n"),l("ul",[l("li",[v._v("strings.Replace(str, old, new, n) string\n"),l("ul",[l("li",[v._v("若n为 -1 表示替换所有")])])])])]),v._v(" "),l("li",[v._v("统计次数\n"),l("ul",[l("li",[v._v("strings.Count(s, str string) int")])])]),v._v(" "),l("li",[v._v("重复字符串. 重复 count 次字符串 s 并返回一个新的字符串\n"),l("ul",[l("li",[v._v("strings.Repeat(s, count int) string")])])]),v._v(" "),l("li",[v._v("大小写\n"),l("ul",[l("li",[v._v("strings.ToLower(s) string")]),v._v(" "),l("li",[v._v("strings.ToUpper(s) string")])])]),v._v(" "),l("li",[v._v("修剪字符串\n"),l("ul",[l("li",[v._v("strings.TrimSpace(s).\n"),l("ul",[l("li",[v._v('剔除开头和结尾的空白符号, 也可以剔除指定字符, strings.Trim(s, "cut")')])])]),v._v(" "),l("li",[v._v("TrimLeft / TrimRight")])])]),v._v(" "),l("li",[v._v("分割字符串\n"),l("ul",[l("li",[v._v("strings.Fields(s). 使用1个或多个空白符分割")]),v._v(" "),l("li",[v._v("strings.Split(s, sep). 使用指定字符 step 分割")])])]),v._v(" "),l("li",[v._v("拼接\n"),l("ul",[l("li",[v._v("strings.Join(sl []string, sep string) string")])])]),v._v(" "),l("li",[v._v("从字符串读取内容\n"),l("ul",[l("li",[v._v("strings.NewReader(str), 生成 Reader读取字符串内容, 返回指向该Reader的指针")]),v._v(" "),l("li",[v._v("Read() 从[]byte 中读取内容")]),v._v(" "),l("li",[v._v("ReadByte() 和 ReadRune() 从字符串读取下一个byte或者rune")])])])])]),v._v(" "),l("li",[v._v("字符串类型转换\n"),l("ul",[l("li",[v._v("strconv")])])])])]),v._v(" "),l("li",[v._v("指针\n"),l("ul",[l("li",[v._v("提供了控制数据结构的指针的能力；但是，你不能进行指针运算。")]),v._v(" "),l("li",[v._v("一个指针变量可以指向任何一个值的内存地址")]),v._v(" "),l("li",[v._v("指针的一个高级应用是你可以传递一个变量的引用（如函数的参数），这样不会传递变量的拷贝\n"),l("ul",[l("li",[v._v("减少内存效率, 提高效率")])])]),v._v(" "),l("li",[v._v("一个空指针的反向引用是不合法")])])])]),v._v(" "),l("h3",{attrs:{id:"_5-控制结构"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#_5-控制结构"}},[v._v("#")]),v._v(" 5. 控制结构")]),v._v(" "),l("ol",[l("li",[v._v("提高如下结构\n"),l("ol",[l("li",[v._v("if-else 结构")]),v._v(" "),l("li",[v._v("switch 结构")]),v._v(" "),l("li",[v._v("select 结构，用于 channel 的选择")]),v._v(" "),l("li",[v._v("for (range) 结构")])])])]),v._v(" "),l("h3",{attrs:{id:"_6-函数-function"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#_6-函数-function"}},[v._v("#")]),v._v(" 6. 函数(function)")]),v._v(" "),l("ol",[l("li",[v._v("介绍\n"),l("ol",[l("li",[v._v("Go 函数的功能非常强大，以至于被认为拥有函数式编程语言的多种特性")])])]),v._v(" "),l("li",[v._v("Go 里面有三种类型的函数：\n"),l("ol",[l("li",[v._v("普通的带有名字的函数")]),v._v(" "),l("li",[v._v("匿名函数或者lambda函数")]),v._v(" "),l("li",[v._v("方法（Methods）")])])]),v._v(" "),l("li",[v._v("不支持函数重载")]),v._v(" "),l("li",[v._v("不支持泛型")]),v._v(" "),l("li",[v._v("defer 和追踪(有趣)")]),v._v(" "),l("li",[v._v("内置函数(不需要导入就可以使用)\n"),l("ol",[l("li",[v._v("close: 用于管道通信")]),v._v(" "),l("li",[v._v("len: 返回某个类型的长度")]),v._v(" "),l("li",[v._v("cap: 返回某个类型的最大容量(只能用于切片和map)")]),v._v(" "),l("li",[v._v("copy: 复制切片")]),v._v(" "),l("li",[v._v("append: 连接切片")]),v._v(" "),l("li",[v._v("panic, recover: 均用于错误处理机制")]),v._v(" "),l("li",[v._v("print, println: 底层打印函数, 在部署环境中建议使用fmt包")]),v._v(" "),l("li",[v._v("complex, real imag: 创建和操作复数")])])]),v._v(" "),l("li",[v._v("递归函数\n"),l("ol",[l("li",[v._v("自己调用自己")]),v._v(" "),l("li",[v._v("大量递归会导致程序栈内存分配耗尽\n"),l("ol",[l("li",[v._v("可以通过channel和goroutine解决")])])])])]),v._v(" "),l("li",[v._v("将函数作为参数")]),v._v(" "),l("li",[v._v("闭包\n"),l("ol",[l("li",[v._v("匿名函数")]),v._v(" "),l("li",[v._v("匿名函数同样被称之为闭包（函数式语言的术语）：它们被允许调用定义在其它环境下的变量。")]),v._v(" "),l("li",[v._v("闭包可使得某个函数捕捉到一些外部状态，例如：函数被创建时的状态。")]),v._v(" "),l("li",[v._v("另一种表示方式为：一个闭包继承了函数所声明时的作用域。这种状态（作用域内的变量）都被共享到闭包的环境中，因此这些变量可以在闭包中被操作，直到被销毁")]),v._v(" "),l("li",[v._v("闭包经常被用作包装函数：它们会预先定义好 1 个或多个参数以用于包装")]),v._v(" "),l("li",[v._v("另一个不错的应用就是使用闭包来完成更加简洁的错误检查")]),v._v(" "),l("li",[v._v("应用\n"),l("ol",[l("li",[v._v("将函数作为返回值(工厂函数)")]),v._v(" "),l("li",[v._v("调试, 打印函数当前执行位置,")]),v._v(" "),l("li",[v._v("计算耗时")])])])])]),v._v(" "),l("li",[v._v("通过内存缓存提升性能\n"),l("ol",[l("li",[v._v("在使用计算成本相对昂贵的函数时非常有用")]),v._v(" "),l("li",[v._v("还可以应用于纯函数中，即相同输入必定获得相同输出的函数。")])])])]),v._v(" "),l("h3",{attrs:{id:"_7-数组与切片"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#_7-数组与切片"}},[v._v("#")]),v._v(" 7. 数组与切片")]),v._v(" "),l("ol",[l("li",[v._v("数组\n"),l("ol",[l("li",[v._v("概念\n"),l("ol",[l("li",[v._v("具有相同 唯一类型 的一组已编号且长度固定的数据项序列（这是一种同构的数据结构）；这种类型可以是任意的原始类型例如整型、字符串或者自定义类型。数组长度必须是一个常量表达式，并且必须是一个非负整数。数组长度也是数组类型的一部分，所以[5]int和[10]int是属于不同类型的。")]),v._v(" "),l("li",[v._v("如果我们想让数组元素类型为任意类型的话可以使用空接口作为类型")]),v._v(" "),l("li",[v._v("数组长度最大为 "),l("strong",[v._v("2Gb")])]),v._v(" "),l("li",[v._v("数组是"),l("strong",[v._v("可变")]),v._v("的")]),v._v(" "),l("li",[v._v("一种值类型（不像 C/C++ 中是指向首元素的指针）")])])]),v._v(" "),l("li",[v._v("多维数组\n"),l("ol",[l("li",[v._v("内部数组总是长度相同的。Go 语言的多维数组是矩形式的（唯一的例外是切片的数组)")])])]),v._v(" "),l("li",[v._v("将数组传递给函数\n"),l("ol",[l("li",[v._v("避免把一个大数组传递给函数会消耗很多内存\n"),l("ol",[l("li",[v._v("传递数组的指针(不常用)")]),v._v(" "),l("li",[v._v("使用数组的切片")])])])])])])]),v._v(" "),l("li",[v._v("切片\n"),l("ol",[l("li",[v._v("是对数组一个连续片段的引用（该数组我们称之为相关数组，通常是匿名的），所以切片是一个引用类型\n"),l("ol",[l("li",[v._v("由起始和终止索引标识的一些项的子集。需要注意的是，终止索引标识的项不包括在切片内")]),v._v(" "),l("li",[v._v("可索引的, 并且可以由 len() 函数获取长度")]),v._v(" "),l("li",[v._v("长度可变的数组, 切片长度可以在运行时修改, 最小为0, 最大为相关数组长度")]),v._v(" "),l("li",[v._v("cap(): 计算切片容量. 从 切片 s[0] 到数组末尾的数组长度\n"),l("ol",[l("li",[v._v("对于切片s: 0 <= len(s) <= cap(s)")])])]),v._v(" "),l("li",[v._v("多个切片的相关数组如果相同, 则可以共享数据. 数组实际上是切片的构建块")]),v._v(" "),l("li",[v._v("切片只能向后移动, s2 = s2[-1:] 会导致编译错误. 不能被重新分片以获取数组的前一个元素")]),v._v(" "),l("li",[v._v("绝对"),l("strong",[v._v("不要用指针指向 slice")]),v._v("。切片本身已经是一个引用类型，所以它本身就是一个指针!!")])])]),v._v(" "),l("li",[v._v("使用make创建切片\n"),l("ol",[l("li",[v._v("func make([]T, len, cap), cap是可选参数")])])]),v._v(" "),l("li",[v._v("new() 和 make() 的区别\n"),l("ol",[l("li",[v._v("new 函数分配内存, make 函数初始化")]),v._v(" "),l("li",[v._v("new(T) 为每个新的类型T分配一片内存，初始化为 0 并且返回类型为*T的内存地址：这种方法 "),l("strong",[v._v("返回一个指向类型为 T，值为 0 的地址的指针")]),v._v("，它适用于值类型如数组和结构体; 它相当于 &T{}")]),v._v(" "),l("li",[v._v("make(T) "),l("strong",[v._v("返回一个类型为 T 的初始值")]),v._v("，它只适用于3种内建的引用类型：切片、map 和 channel")])])]),v._v(" "),l("li",[v._v("如何理解new、make、slice、map、channel的关系\n"),l("ol",[l("li",[v._v("slice、map以及channel都是golang内建的一种引用类型，三者在内存中存在多个组成部分， 需要对内存组成部分初始化后才能使用，而make就是对三者进行初始化的一种操作方式")]),v._v(" "),l("li",[v._v("new 获取的是存储指定变量内存地址的一个变量，对于变量内部结构并不会执行相应的初始化操作， 所以slice、map、channel需要make进行初始化并获取对应的内存地址，而非new简单的获取内存地址")])])]),v._v(" "),l("li",[v._v("多维分片\n"),l("ol",[l("li",[v._v("由一维组合成高维, 长度可以任意动态变化")]),v._v(" "),l("li",[v._v("内层的切片必须单独分配(通过make函数)")])])]),v._v(" "),l("li",[v._v("bytes包\n"),l("ol",[l("li",[v._v("[]byte")]),v._v(" "),l("li",[v._v("bytes 包和字符串包十分类似")]),v._v(" "),l("li",[v._v("var buffer bytes.Buffer, 提供 Read 和 Write 方法")]),v._v(" "),l("li",[v._v("串联字符串\n"),l("ol",[l("li",[v._v("通过 buffer.WriteString(s) 方法将字符串 s 追加到后面，最后再通过 buffer.String() 方法转换为 string")]),v._v(" "),l("li",[v._v("比使用 += 要更节省内存和 CPU")])])])])])])]),v._v(" "),l("li",[v._v("For-range 结构\n"),l("ol",[l("li",[l("div",{staticClass:"language- extra-class"},[l("pre",{pre:!0,attrs:{class:"language-text"}},[l("code",[v._v("    for ix, value := range slice1 {\n            ...\n    }\n")])])]),l("ol",[l("li",[v._v("ix 为数组或切片的索引, value是在该索引位置的值(一个拷贝, 不能用来修改该索引位置的值)")])])])])]),v._v(" "),l("li",[v._v("切片的复制与追加\n"),l("ol",[l("li",[v._v("增加切片容量\n"),l("ol",[l("li",[v._v("func append(s[]T, x ...T) []T\n"),l("ol",[l("li",[v._v("追加的元素需要和原切片元素类型相同")]),v._v(" "),l("li",[v._v("如果s容量不足, append会分配新的切片来保证已有切片元素和新增元素的存储. 因此, 返回的切片可能已经指向一个不同的相关数组了")]),v._v(" "),l("li",[v._v("x = append(x, y...)\n"),l("ol",[l("li",[v._v("将切片 y 追加到切片 x 后面")]),v._v(" "),l("li",[v._v("... 将y打散")])])])])]),v._v(" "),l("li",[v._v("func copy(dst, src []T) in\n"),l("ol",[l("li",[v._v("将类型为 T 的切片从源地址 src 拷贝到目标地址 dst，覆盖 dst 的相关元素，并且返回拷贝的元素个数")])])])])])])])]),v._v(" "),l("h3",{attrs:{id:"_8-map"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#_8-map"}},[v._v("#")]),v._v(" 8. Map")]),v._v(" "),l("ol",[l("li",[v._v("声明、初始化和 make\n"),l("ol",[l("li",[v._v("概念\n"),l("ol",[l("li",[v._v("引用类型.")]),v._v(" "),l("li",[v._v("声明: var map1 map[keytype]valuetype\n"),l("ol",[l("li",[v._v("key的类型\n"),l("ol",[l("li",[v._v("可以使用 == 或 != 操作符比较的类型. 比如string, int, float.")]),v._v(" "),l("li",[v._v("数组, 切片, 结构体不能作为key,(只包含内建类型的struct可以作为key)")])])])])]),v._v(" "),l("li",[v._v("不需要知道map长度, 可以动态增长")]),v._v(" "),l("li",[v._v("传递给函数的代价很小, 无论存储了多少数据")]),v._v(" "),l("li",[v._v("比从数组和切片的索引中直接读取慢100倍")])])])])])])])}),[],!1,null,null,null);_.default=n.exports}}]);