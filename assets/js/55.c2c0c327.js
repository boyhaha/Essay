(window.webpackJsonp=window.webpackJsonp||[]).push([[55],{422:function(v,_,p){"use strict";p.r(_);var t=p(44),i=Object(t.a)({},(function(){var v=this,_=v.$createElement,p=v._self._c||_;return p("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[p("h1",{attrs:{id:"_11-git"}},[p("a",{staticClass:"header-anchor",attrs:{href:"#_11-git"}},[v._v("#")]),v._v(" 11-Git")]),v._v(" "),p("p",[v._v("git revert是用一次新的commit来回滚之前的commit，git reset是直接删除指定的commit")]),v._v(" "),p("p",[v._v("开发")]),v._v(" "),p("p",[v._v("添加ssh账户")]),v._v(" "),p("p",[v._v("本地克隆")]),v._v(" "),p("p",[v._v("同步分支")]),v._v(" "),p("p",[v._v("git branch --set-upstream-to=origin/分支名称 分支名称")]),v._v(" "),p("p",[v._v("将本地分支跟踪服务器分支")]),v._v(" "),p("p",[v._v("git checkout -b dev origin/dev")]),v._v(" "),p("p",[v._v("将github上的dev分支同步到本地，")]),v._v(" "),p("p",[v._v("开发过程中，所有组员都向这个分支上提交阶段性代码，并从这个分支获取最新代码")]),v._v(" "),p("p",[v._v("开发管理")]),v._v(" "),p("p",[v._v("工作区和暂存区")]),v._v(" "),p("p",[v._v("图片")]),v._v(" "),p("p"),v._v(" "),p("p",[v._v("git add 目录")]),v._v(" "),p("p",[v._v("添加到暂存区")]),v._v(" "),p("p",[v._v("git checkout -- 文件名")]),v._v(" "),p("p",[v._v("回到暂存区的状态")]),v._v(" "),p("p",[v._v("暂存区与仓库区")]),v._v(" "),p("p",[v._v("图片")]),v._v(" "),p("p"),v._v(" "),p("p",[v._v("git status")]),v._v(" "),p("p",[v._v("查看暂存区未提交的记录")]),v._v(" "),p("p",[v._v("git commit -m '本次提交的说明信息'")]),v._v(" "),p("p",[v._v("将暂存区的记录提交到仓库区")]),v._v(" "),p("p",[v._v("本地与服务器")]),v._v(" "),p("p",[v._v("图片")]),v._v(" "),p("p"),v._v(" "),p("p",[v._v("建议")]),v._v(" "),p("p",[v._v("每天开始前先与服务器同步一次")]),v._v(" "),p("p",[v._v("开发完一个功能后合并到dev分支")]),v._v(" "),p("p",[v._v("git checkout dev")]),v._v(" "),p("p",[v._v("切换到dev分支")]),v._v(" "),p("p",[v._v("git pull")]),v._v(" "),p("p",[v._v("获取代码，如果dev分支上有更新的记录则会同步到本地")]),v._v(" "),p("p",[v._v("git merge huluwa")]),v._v(" "),p("p",[v._v("合并")]),v._v(" "),p("p",[v._v("git push origin dev")]),v._v(" "),p("p",[v._v("添加、提交并推送")]),v._v(" "),p("p",[v._v("git checkout huluwa")]),v._v(" "),p("p",[v._v("切换回工作分支")]),v._v(" "),p("p",[v._v("git merge dev")]),v._v(" "),p("p",[v._v("在最新代码上继续开发，所以将dev分支合并到huluwa分支")]),v._v(" "),p("p",[v._v("解决冲突")]),v._v(" "),p("p",[v._v("合并时 --- 出现冲突后需要手动提交")]),v._v(" "),p("p",[v._v("历史")]),v._v(" "),p("p",[v._v("查看历史")]),v._v(" "),p("p",[v._v("git reflog")]),v._v(" "),p("p",[v._v("在Git中，用HEAD表示当前版本")]),v._v(" "),p("p",[v._v("上一个版本就是HEAD^")]),v._v(" "),p("p",[v._v("再上一个版本就是HEAD^^")]),v._v(" "),p("p",[v._v("往上100个版本可以简写为  HEAD~100")]),v._v(" "),p("p",[v._v("比较不同")]),v._v(" "),p("p",[v._v("git diff *********")]),v._v(" "),p("p",[v._v("git diff HEAD -- df_user/models.py")]),v._v(" "),p("p",[v._v("对比工作区和仓库区某版本  某文件或某目录下   的不同")]),v._v(" "),p("p",[v._v("git diff HEAD HEAD^^  -- df_user/models.py")]),v._v(" "),p("p",[v._v("对比上次提交和上上次提交")]),v._v(" "),p("p",[v._v("git diff SHA1 SHA2")]),v._v(" "),p("p",[v._v("比较两个历史版本的区别")]),v._v(" "),p("p",[v._v("回退")]),v._v(" "),p("p",[v._v("git reset HEAD^或版本号")]),v._v(" "),p("p",[v._v("将仓库区中某个版本的修改恢复到暂存区")]),v._v(" "),p("p",[v._v("git status")]),v._v(" "),p("p",[v._v("git checkout -- df_user/models.py")]),v._v(" "),p("p",[v._v("将暂存区的恢复到工作区")]),v._v(" "),p("p",[v._v("删除")]),v._v(" "),p("p",[v._v("先删除文件")]),v._v(" "),p("p",[v._v("git rm 文件名")]),v._v(" "),p("p",[v._v("在暂存区删除")]),v._v(" "),p("p",[v._v("git commit -m '说明信息'")]),v._v(" "),p("p",[v._v("提交到仓库区")]),v._v(" "),p("p",[v._v("同样可以回退")]),v._v(" "),p("p",[v._v("Debug分支")]),v._v(" "),p("p",[v._v("暂停开发,修改bug")]),v._v(" "),p("p",[v._v("git stash")]),v._v(" "),p("p",[v._v("保存现场")]),v._v(" "),p("p",[v._v("git checkout master")]),v._v(" "),p("p",[v._v("git checkout -b bug001")]),v._v(" "),p("p",[v._v("修改文件")]),v._v(" "),p("p",[v._v("git add 文件或者目录")]),v._v(" "),p("p",[v._v("git commit -m '修复时区语言'")]),v._v(" "),p("p",[v._v("git checkout master")]),v._v(" "),p("p",[v._v('git merge --no-ff -m "修复bug-语言时区" bug001')]),v._v(" "),p("p",[v._v("因为临时分支用完后会被删除，无法通过分支查询历史记录，所以使用临时分支时需要使用no-ff的方式，")]),v._v(" "),p("p",[v._v("同时写上-m备注信息, 作为master分支上的一个节点")]),v._v(" "),p("p",[v._v("git push")]),v._v(" "),p("p",[v._v("推送")]),v._v(" "),p("p",[v._v("git branch -d bug001")]),v._v(" "),p("p",[v._v("删除临时分支")]),v._v(" "),p("p",[v._v("git checkout huluwa")]),v._v(" "),p("p",[v._v("切换回工作分支")]),v._v(" "),p("p",[v._v("git stash list")]),v._v(" "),p("p",[v._v("查看现场列表")]),v._v(" "),p("p",[v._v("git stash pop")]),v._v(" "),p("p",[v._v("恢复现场")]),v._v(" "),p("p",[v._v("回到之前的工作进度")]),v._v(" "),p("p",[v._v("子主题 3")])])}),[],!1,null,null,null);_.default=i.exports}}]);