(window.webpackJsonp=window.webpackJsonp||[]).push([[120],{496:function(e,t,r){"use strict";r.r(t);var i=r(44),l=Object(i.a)({},(function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("h1",{attrs:{id:"安装"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#安装"}},[e._v("#")]),e._v(" 安装")]),e._v(" "),r("h2",{attrs:{id:"centos-安装docker"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#centos-安装docker"}},[e._v("#")]),e._v(" CentOS 安装docker")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("# 查看内核版本\nuname -r \n")])])]),r("h3",{attrs:{id:"启动服务"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#启动服务"}},[e._v("#")]),e._v(" 启动服务")]),e._v(" "),r("ul",[r("li",[e._v("service docker start")]),e._v(" "),r("li",[e._v("自动启动")]),e._v(" "),r("li",[e._v("su root # 先切换到root用户, 再执行以下命令")]),e._v(" "),r("li",[e._v("systemctl enable docker # 开机自动启动docker")]),e._v(" "),r("li",[e._v("systemctl start docker # 启动docker")]),e._v(" "),r("li",[e._v("systemctl restart docker # 重启dokcer")])]),e._v(" "),r("h3",{attrs:{id:"搭建registry"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#搭建registry"}},[e._v("#")]),e._v(" 搭建registry")]),e._v(" "),r("ul",[r("li",[e._v("docker run -d -p 5000:5000 --restart always --name registry registry:2")]),e._v(" "),r("li",[e._v("使用V2版本的 registry")]),e._v(" "),r("li",[e._v("启动UI界面")]),e._v(" "),r("li",[e._v("docker run -d -p 8080:8080 --name registry-web --link registry -e REGISTRY_URL=http://registry:5000/v2 -e REGISTRY_NAME=localhost:5000 hyper/docker-registry-web")]),e._v(" "),r("li",[e._v("上传")]),e._v(" "),r("li",[e._v("命令\n"),r("ul",[r("li",[e._v("docker tag athena:0.1 127.0.0.1:5000/athena:0.1")]),e._v(" "),r("li",[e._v("docker push 127.0.0.1:5000/athena")])])]),e._v(" "),r("li",[e._v("需要修改镜像名\n"),r("ul",[r("li",[e._v("格式为 "),r("code",[e._v("docker tag IMAGE[:TAG] [REGISTRY_HOST[:REGISTRY_PORT]/]REPOSITORY[:TAG]")])])])])]),e._v(" "),r("h3",{attrs:{id:"常用命令"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#常用命令"}},[e._v("#")]),e._v(" 常用命令")]),e._v(" "),r("ul",[r("li",[e._v("列出镜像")]),e._v(" "),r("li",[e._v("docker system df\n"),r("ul",[r("li",[e._v("查看镜像，容器，数据卷所占用的空间")])])]),e._v(" "),r("li",[e._v("docker image ls -f since=mongo:3.2\n"),r("ul",[r("li",[e._v("某个tag之后建立的")]),e._v(" "),r("li",[e._v("before")]),e._v(" "),r("li",[e._v("options")]),e._v(" "),r("li",[e._v("-f\n"),r("ul",[r("li",[e._v("过滤条件")])])]),e._v(" "),r("li",[e._v("-q\n"),r("ul",[r("li",[e._v("只显示 ID")])])])])]),e._v(" "),r("li",[e._v("删除镜像")]),e._v(" "),r("li",[e._v("docker rmi …..\n"),r("ul",[r("li",[e._v("docker image rm $(docker image ls -q redis)")])])]),e._v(" "),r("li",[e._v("docker image rm 504\n"),r("ul",[r("li",[e._v("删除的时候可以用短 id ，只要足够区分于别的镜像就可以")])])]),e._v(" "),r("li",[e._v("docker image rm centos\n"),r("ul",[r("li",[e._v("也可以使用<仓库名>:<标签>")])])]),e._v(" "),r("li"),e._v(" "),r("li",[e._v("构建镜像\n"),r("ul",[r("li",[e._v("docker commit\n"),r("ul",[r("li",[e._v("使用 "),r("code",[e._v("docker commit")]),e._v(" 意味着所有对镜像的操作都是黑箱操作，生成的镜像也被称为"),r("strong",[e._v("黑箱镜像")])])])])])]),e._v(" "),r("li",[e._v("进入Docker容器\n"),r("ul",[r("li",[e._v("sudo docker exec -it xxx /bin/bash")])])]),e._v(" "),r("li",[e._v("查看日志\n"),r("ul",[r("li",[e._v("docker logs [OPTIONS] CONTAINER")]),e._v(" "),r("li",[e._v("Options:\n--details        显示更多的信息\n-f, --follow         跟踪实时日志\n--since string   显示自某个timestamp之后的日志，或相对时间，如42m（即42分钟）\n--tail string    从日志末尾显示多少行日志， 默认是all\n-t, --timestamps     显示时间戳\n--until string   显示自某个timestamp之前的日志，或相对时间，如42m（即42分钟）")])])])])])}),[],!1,null,null,null);t.default=l.exports}}]);