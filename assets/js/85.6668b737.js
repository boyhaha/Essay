(window.webpackJsonp=window.webpackJsonp||[]).push([[85],{458:function(_,v,l){"use strict";l.r(v);var a=l(44),i=Object(a.a)({},(function(){var _=this,v=_.$createElement,l=_._self._c||v;return l("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[l("h1",{attrs:{id:"_50-设计模式"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#_50-设计模式"}},[_._v("#")]),_._v(" 50-设计模式")]),_._v(" "),l("ul",[l("li",[l("p",[_._v("设计模式的定义:为了解决面向对象系统中重要和重复的设计封装在一起的一种代码实现框架,可以使得代码更加易于扩展和调用")])]),_._v(" "),l("li",[l("p",[_._v("四个基本要素:模式名称,问题,解决方案,效果")])]),_._v(" "),l("li",[l("p",[_._v("六大原则:")]),_._v(" "),l("ul",[l("li",[_._v("开闭原则:一个软件实体,如类,模块和函数应该对扩展开放,对修改关闭.既软件实体应尽量在不修改原有代码的情况下进行扩展.")]),_._v(" "),l("li",[_._v("里氏替换原则:所有引用父类的方法必须能透明的使用其子类的对象")]),_._v(" "),l("li",[_._v("依赖倒置原则:高层模块不应该依赖底层模块,二者都应该依赖其抽象,抽象不应该依赖于细节,细节应该依赖抽象,换而言之,要针对接口编程而不是针对实现编程")]),_._v(" "),l("li",[_._v("接口隔离原则:使用多个专门的接口,而不是使用单一的总接口,即客户端不应该依赖那些并不需要的接口")]),_._v(" "),l("li",[_._v("迪米特法则:一个软件实体应该尽可能的少与其他实体相互作用")]),_._v(" "),l("li",[_._v("单一职责原则:不要存在多个导致类变更的原因.即一个类只负责一项职责")])])]),_._v(" "),l("li",[l("p",[_._v("三种最基本的设计模式：")]),_._v(" "),l("ul",[l("li",[_._v("创建模式，提供实例化的方法，为适合的状况提供相应的对象创建方法。")]),_._v(" "),l("li",[_._v("结构化模式，通常用来处理实体之间的关系，使得这些实体能够更好地协同工作。")]),_._v(" "),l("li",[_._v("行为模式，用于在不同的实体建进行通信，为实体之间的通信提供更容易，更灵活的通信方法。")])])]),_._v(" "),l("li",[l("p",[_._v("创建型")]),_._v(" "),l("ol",[l("li",[l("span",{staticStyle:{"background-color":"#ffaaaa"}},[_._v("Simple Factory Pattern")]),l("span",{staticStyle:{"background-color":"#ffaaaa"}},[_._v("（简单工厂）")]),_._v(" "),l("ol",[l("li",[_._v("根据参数的不同返回不同类的实例。简单工厂模式专门定义一个类来负责创建其他类的实例")])])]),_._v(" "),l("li",[_._v("Abstract Factory（抽象工厂）")]),_._v(" "),l("li",[l("span",{staticStyle:{"background-color":"#ffaaaa"}},[_._v("Builder（建造者）")]),_._v(" "),l("ol",[l("li",[_._v("将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示")]),_._v(" "),l("li",[_._v("建造者模式是一步一步创建一个复杂的对象，它允许用户只通过指定复杂对象的类型和内容就可以构建它们，用户不需要知道内部的具体构建细节")])])]),_._v(" "),l("li",[l("span",{staticStyle:{"background-color":"#ffaaaa"}},[_._v("Singleton（单例）")])])])]),_._v(" "),l("li",[l("p",[_._v("结构型")]),_._v(" "),l("ol",[l("li",[_._v("Adapter Class/Object（适配器）")]),_._v(" "),l("li",[_._v("Bridge（桥接）")]),_._v(" "),l("li",[_._v("Composite（组合）")]),_._v(" "),l("li",[_._v("Decorator（装饰）")]),_._v(" "),l("li",[_._v("Facade（外观）")]),_._v(" "),l("li",[_._v("Flyweight（享元）")]),_._v(" "),l("li",[_._v("Proxy（代理）")])])]),_._v(" "),l("li",[l("p",[_._v("行为型")]),_._v(" "),l("ol",[l("li",[_._v("Interpreter（解释器）")]),_._v(" "),l("li",[_._v("Template Method（模板方法）")]),_._v(" "),l("li",[_._v("Chain of Responsibility（责任链）")]),_._v(" "),l("li",[_._v("Command（命令）")]),_._v(" "),l("li",[_._v("Iterator（迭代器）")]),_._v(" "),l("li",[_._v("Mediator（中介者）")]),_._v(" "),l("li",[_._v("Memento（备忘录）")]),_._v(" "),l("li",[l("span",{staticStyle:{"background-color":"#ffaaaa"}},[_._v("Observer（观察者）")]),_._v(" "),l("ul",[l("li",[_._v("定义对象间的一种一对多依赖关系，使得每当一个对象状态发生改变时，其相关依赖对象皆得到通知并被自动更新。观察者模式又叫做发布-订阅")])])]),_._v(" "),l("li",[_._v("State（状态）")]),_._v(" "),l("li",[l("span",{staticStyle:{"background-color":"#ffaaaa"}},[_._v("Strategy（策略）")]),_._v(" "),l("ul",[l("li",[_._v("封装一系列策略，可以相互替换，由客户端决定使用哪种策略，而不是硬编码的去判断")])])]),_._v(" "),l("li",[_._v("Visitor（访问者）")])])])])])}),[],!1,null,null,null);v.default=i.exports}}]);